on:
  push:
    tags: v*

jobs:
  build-and-release:
    runs-on: self-hosted

    steps:
      - name: check out code
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: setup-cocoapods
        uses: maxim-lobanov/setup-cocoapods@v1
        with:
          podfile-path: ./Podfile.lock

      - name: install pods
        run: |
          pod install

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: prepare the version numbers
        uses: actions/github-script@v4
        id: set_version
        with:
          script: |
            const tag = context.ref.substring(10)
            const no_v = tag.replace('v', '')
            const dash_index = no_v.lastIndexOf('-')
            const no_dash = (dash_index > -1) ?  no_v.substring(0, dash_index) : no_v
            core.setOutput('tag', tag)
            core.setOutput('no-v', no_v)
            core.setOutput('no-dash', no_dash)

      - name: set the version
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          agvtool new-marketing-version ${{steps.set_version.outputs.no_v}}

      - name: build app
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          xcodebuild \
            -workspace NiceDishy.xcworkspace \
            -scheme "NiceDishy" \
            -configuration "Release" \
            install \
            DSTROOT=build/root

      - name: make the final build dir
        run: |
          mkdir -p final-build

      - name: copy the final build
        run: |
          cp -r build/root/Applications/NiceDishy.app final-build

      - name: add a link to the Applications folder
        run: |
          ln -s /Applications final-build/Applications


      - name: package app
        run: |
          hdiutil create \
                  -fs HFS+ \
                  -srcfolder "final-build" \
                  -volname "NiceDishy" "build/NiceDishy.dmg"

      - name: sign app
        run: |
          npx notarize-cli --file "build/NiceDishy.dmg" --bundle-id com.marcecampbell.NiceDishy
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}

      - name: release app
        uses: softprops/action-gh-release@v1
        with:
          files: build/NiceDishy.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
