// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacex/api/device/transceiver.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "spacex/api/device/Transceiver.pbobjc.h"
#import "spacex/api/device/Common.pbobjc.h"
#import "spacex/api/device/Dish.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(TransceiverFaults);

#pragma mark - TransceiverRoot

@implementation TransceiverRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TransceiverRoot_FileDescriptor

static GPBFileDescriptor *TransceiverRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"SpaceX.API.Device"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum TransceiverModulatorState

GPBEnumDescriptor *TransceiverModulatorState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ModstateUnknown\000ModstateEnabled\000Modstate"
        "Disabled\000";
    static const int32_t values[] = {
        TransceiverModulatorState_ModstateUnknown,
        TransceiverModulatorState_ModstateEnabled,
        TransceiverModulatorState_ModstateDisabled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransceiverModulatorState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransceiverModulatorState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransceiverModulatorState_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransceiverModulatorState_ModstateUnknown:
    case TransceiverModulatorState_ModstateEnabled:
    case TransceiverModulatorState_ModstateDisabled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TransceiverTxRxState

GPBEnumDescriptor *TransceiverTxRxState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TxrxUnknown\000TxrxEnabled\000TxrxDisabled\000";
    static const int32_t values[] = {
        TransceiverTxRxState_TxrxUnknown,
        TransceiverTxRxState_TxrxEnabled,
        TransceiverTxRxState_TxrxDisabled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransceiverTxRxState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransceiverTxRxState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransceiverTxRxState_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransceiverTxRxState_TxrxUnknown:
    case TransceiverTxRxState_TxrxEnabled:
    case TransceiverTxRxState_TxrxDisabled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TransceiverTransmitBlankingState

GPBEnumDescriptor *TransceiverTransmitBlankingState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TbUnknown\000TbEnabled\000TbDisabled\000";
    static const int32_t values[] = {
        TransceiverTransmitBlankingState_TbUnknown,
        TransceiverTransmitBlankingState_TbEnabled,
        TransceiverTransmitBlankingState_TbDisabled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransceiverTransmitBlankingState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TransceiverTransmitBlankingState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TransceiverTransmitBlankingState_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransceiverTransmitBlankingState_TbUnknown:
    case TransceiverTransmitBlankingState_TbEnabled:
    case TransceiverTransmitBlankingState_TbDisabled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TransceiverIFLoopbackTestRequest

@implementation TransceiverIFLoopbackTestRequest

@dynamic enableIfLoopback;

typedef struct TransceiverIFLoopbackTestRequest__storage_ {
  uint32_t _has_storage_[1];
} TransceiverIFLoopbackTestRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enableIfLoopback",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverIFLoopbackTestRequest_FieldNumber_EnableIfLoopback,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverIFLoopbackTestRequest class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransceiverIFLoopbackTestRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransceiverIFLoopbackTestResponse

@implementation TransceiverIFLoopbackTestResponse

@dynamic berLoopbackTest;
@dynamic snrLoopbackTest;
@dynamic rssiLoopbackTest;
@dynamic pllLock;

typedef struct TransceiverIFLoopbackTestResponse__storage_ {
  uint32_t _has_storage_[1];
  float berLoopbackTest;
  float snrLoopbackTest;
  float rssiLoopbackTest;
} TransceiverIFLoopbackTestResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "berLoopbackTest",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverIFLoopbackTestResponse_FieldNumber_BerLoopbackTest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransceiverIFLoopbackTestResponse__storage_, berLoopbackTest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "snrLoopbackTest",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverIFLoopbackTestResponse_FieldNumber_SnrLoopbackTest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransceiverIFLoopbackTestResponse__storage_, snrLoopbackTest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rssiLoopbackTest",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverIFLoopbackTestResponse_FieldNumber_RssiLoopbackTest,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransceiverIFLoopbackTestResponse__storage_, rssiLoopbackTest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pllLock",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverIFLoopbackTestResponse_FieldNumber_PllLock,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverIFLoopbackTestResponse class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransceiverIFLoopbackTestResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransceiverGetStatusRequest

@implementation TransceiverGetStatusRequest


typedef struct TransceiverGetStatusRequest__storage_ {
  uint32_t _has_storage_[1];
} TransceiverGetStatusRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverGetStatusRequest class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(TransceiverGetStatusRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransceiverGetStatusResponse

@implementation TransceiverGetStatusResponse

@dynamic modState;
@dynamic demodState;
@dynamic txState;
@dynamic rxState;
@dynamic state;
@dynamic hasFaults, faults;
@dynamic transmitBlankingState;
@dynamic modemAsicTemp;
@dynamic txIfTemp;

typedef struct TransceiverGetStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  TransceiverModulatorState modState;
  TransceiverModulatorState demodState;
  TransceiverTxRxState txState;
  TransceiverTxRxState rxState;
  DishState state;
  TransceiverTransmitBlankingState transmitBlankingState;
  float modemAsicTemp;
  float txIfTemp;
  TransceiverFaults *faults;
} TransceiverGetStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modState",
        .dataTypeSpecific.enumDescFunc = TransceiverModulatorState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_ModState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, modState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "demodState",
        .dataTypeSpecific.enumDescFunc = TransceiverModulatorState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_DemodState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, demodState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "txState",
        .dataTypeSpecific.enumDescFunc = TransceiverTxRxState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_TxState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, txState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rxState",
        .dataTypeSpecific.enumDescFunc = TransceiverTxRxState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_RxState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, rxState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = DishState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_State,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "faults",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverFaults),
        .number = TransceiverGetStatusResponse_FieldNumber_Faults,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, faults),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transmitBlankingState",
        .dataTypeSpecific.enumDescFunc = TransceiverTransmitBlankingState_EnumDescriptor,
        .number = TransceiverGetStatusResponse_FieldNumber_TransmitBlankingState,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, transmitBlankingState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modemAsicTemp",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetStatusResponse_FieldNumber_ModemAsicTemp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, modemAsicTemp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "txIfTemp",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetStatusResponse_FieldNumber_TxIfTemp,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TransceiverGetStatusResponse__storage_, txIfTemp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverGetStatusResponse class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransceiverGetStatusResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TransceiverGetStatusResponse_ModState_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_ModState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_ModState_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_ModState];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t TransceiverGetStatusResponse_DemodState_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_DemodState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_DemodState_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_DemodState];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t TransceiverGetStatusResponse_TxState_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_TxState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_TxState_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_TxState];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t TransceiverGetStatusResponse_RxState_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_RxState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_RxState_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_RxState];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t TransceiverGetStatusResponse_State_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_State_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t TransceiverGetStatusResponse_TransmitBlankingState_RawValue(TransceiverGetStatusResponse *message) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_TransmitBlankingState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTransceiverGetStatusResponse_TransmitBlankingState_RawValue(TransceiverGetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransceiverGetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransceiverGetStatusResponse_FieldNumber_TransmitBlankingState];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - TransceiverFaults

@implementation TransceiverFaults

@dynamic overTempModemAsicFault;
@dynamic overTempPcbaFault;
@dynamic dcVoltageFault;

typedef struct TransceiverFaults__storage_ {
  uint32_t _has_storage_[1];
} TransceiverFaults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "overTempModemAsicFault",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverFaults_FieldNumber_OverTempModemAsicFault,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "overTempPcbaFault",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverFaults_FieldNumber_OverTempPcbaFault,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dcVoltageFault",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverFaults_FieldNumber_DcVoltageFault,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverFaults class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransceiverFaults__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransceiverGetTelemetryRequest

@implementation TransceiverGetTelemetryRequest


typedef struct TransceiverGetTelemetryRequest__storage_ {
  uint32_t _has_storage_[1];
} TransceiverGetTelemetryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverGetTelemetryRequest class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(TransceiverGetTelemetryRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransceiverGetTelemetryResponse

@implementation TransceiverGetTelemetryResponse

@dynamic antennaPointingMode;
@dynamic antennaPitch;
@dynamic antennaRoll;
@dynamic antennaRxTheta;
@dynamic antennaTrueHeading;
@dynamic rxChannel;
@dynamic currentCellId;
@dynamic secondsUntilSlotEnd;
@dynamic wbRssiPeakMagDb;
@dynamic popPingDropRate;
@dynamic snrDb;
@dynamic l1SnrAvgDb;
@dynamic l1SnrMinDb;
@dynamic l1SnrMaxDb;
@dynamic lmacSatelliteId;
@dynamic targetSatelliteId;
@dynamic grantMcs;
@dynamic grantSymbolsAvg;
@dynamic dedGrant;
@dynamic mobilityProactiveSlotChange;
@dynamic mobilityReactiveSlotChange;
@dynamic rfpTotalSynFailed;
@dynamic numOutOfSeq;
@dynamic numUlmapDrop;
@dynamic currentSecondsOfSchedule;
@dynamic sendLabelSwitchToGroundFailedCalls;
@dynamic emaVelocityX;
@dynamic emaVelocityY;
@dynamic emaVelocityZ;
@dynamic ceRssiDb;

typedef struct TransceiverGetTelemetryResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t antennaPointingMode;
  float antennaPitch;
  float antennaRoll;
  float antennaRxTheta;
  float antennaTrueHeading;
  uint32_t rxChannel;
  uint32_t currentCellId;
  float secondsUntilSlotEnd;
  float wbRssiPeakMagDb;
  float popPingDropRate;
  float snrDb;
  float l1SnrAvgDb;
  float l1SnrMinDb;
  float l1SnrMaxDb;
  uint32_t lmacSatelliteId;
  uint32_t targetSatelliteId;
  uint32_t grantMcs;
  float grantSymbolsAvg;
  uint32_t dedGrant;
  uint32_t mobilityProactiveSlotChange;
  uint32_t mobilityReactiveSlotChange;
  uint32_t rfpTotalSynFailed;
  uint32_t numOutOfSeq;
  uint32_t numUlmapDrop;
  float currentSecondsOfSchedule;
  uint32_t sendLabelSwitchToGroundFailedCalls;
  float ceRssiDb;
  double emaVelocityX;
  double emaVelocityY;
  double emaVelocityZ;
} TransceiverGetTelemetryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "antennaPointingMode",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_AntennaPointingMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, antennaPointingMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "antennaPitch",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_AntennaPitch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, antennaPitch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "antennaRoll",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_AntennaRoll,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, antennaRoll),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "antennaRxTheta",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_AntennaRxTheta,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, antennaRxTheta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "antennaTrueHeading",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_AntennaTrueHeading,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, antennaTrueHeading),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rxChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_RxChannel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, rxChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "currentCellId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_CurrentCellId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, currentCellId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "secondsUntilSlotEnd",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_SecondsUntilSlotEnd,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, secondsUntilSlotEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "wbRssiPeakMagDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_WbRssiPeakMagDb,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, wbRssiPeakMagDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "popPingDropRate",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_PopPingDropRate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, popPingDropRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "snrDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_SnrDb,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, snrDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "l1SnrAvgDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_L1SnrAvgDb,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, l1SnrAvgDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "l1SnrMinDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_L1SnrMinDb,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, l1SnrMinDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "l1SnrMaxDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_L1SnrMaxDb,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, l1SnrMaxDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "lmacSatelliteId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_LmacSatelliteId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, lmacSatelliteId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "targetSatelliteId",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_TargetSatelliteId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, targetSatelliteId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "grantMcs",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_GrantMcs,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, grantMcs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "grantSymbolsAvg",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_GrantSymbolsAvg,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, grantSymbolsAvg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dedGrant",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_DedGrant,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, dedGrant),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobilityProactiveSlotChange",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_MobilityProactiveSlotChange,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, mobilityProactiveSlotChange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mobilityReactiveSlotChange",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_MobilityReactiveSlotChange,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, mobilityReactiveSlotChange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rfpTotalSynFailed",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_RfpTotalSynFailed,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, rfpTotalSynFailed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "numOutOfSeq",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_NumOutOfSeq,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, numOutOfSeq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "numUlmapDrop",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_NumUlmapDrop,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, numUlmapDrop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "currentSecondsOfSchedule",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_CurrentSecondsOfSchedule,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, currentSecondsOfSchedule),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "sendLabelSwitchToGroundFailedCalls",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_SendLabelSwitchToGroundFailedCalls,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, sendLabelSwitchToGroundFailedCalls),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "emaVelocityX",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_EmaVelocityX,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, emaVelocityX),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "emaVelocityY",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_EmaVelocityY,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, emaVelocityY),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "emaVelocityZ",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_EmaVelocityZ,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, emaVelocityZ),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ceRssiDb",
        .dataTypeSpecific.clazz = Nil,
        .number = TransceiverGetTelemetryResponse_FieldNumber_CeRssiDb,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(TransceiverGetTelemetryResponse__storage_, ceRssiDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransceiverGetTelemetryResponse class]
                                     rootClass:[TransceiverRoot class]
                                          file:TransceiverRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransceiverGetTelemetryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
