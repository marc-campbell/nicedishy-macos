// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacex/api/device/wifi.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "spacex/api/device/Wifi.pbobjc.h"
#import "spacex/api/device/Common.pbobjc.h"
#import "spacex/api/device/WifiConfig.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ChallengeResponse);
GPBObjCClassDeclaration(DeviceInfo);
GPBObjCClassDeclaration(DeviceState);
GPBObjCClassDeclaration(MeshState);
GPBObjCClassDeclaration(PingMetrics);
GPBObjCClassDeclaration(SignedData);
GPBObjCClassDeclaration(WifiClient);
GPBObjCClassDeclaration(WifiClient_RxStats);
GPBObjCClassDeclaration(WifiClient_TxStats);
GPBObjCClassDeclaration(WifiConfig);
GPBObjCClassDeclaration(WifiGetStatusResponse);
GPBObjCClassDeclaration(WifiNetwork);
GPBObjCClassDeclaration(WifiPersistentStats);
GPBObjCClassDeclaration(WifiPersistentStats_Event);
GPBObjCClassDeclaration(WifiScanResults);
GPBObjCClassDeclaration(WifiScanResults_Network);

#pragma mark - WifiRoot

@implementation WifiRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WifiRoot_FileDescriptor

static GPBFileDescriptor *WifiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"SpaceX.API.Device"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MeshState

@implementation MeshState

@dynamic auth;
@dynamic secondsSinceContact;

typedef struct MeshState__storage_ {
  uint32_t _has_storage_[1];
  MeshAuth auth;
  uint32_t secondsSinceContact;
} MeshState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "auth",
        .dataTypeSpecific.enumDescFunc = MeshAuth_EnumDescriptor,
        .number = MeshState_FieldNumber_Auth,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MeshState__storage_, auth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "secondsSinceContact",
        .dataTypeSpecific.clazz = Nil,
        .number = MeshState_FieldNumber_SecondsSinceContact,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MeshState__storage_, secondsSinceContact),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MeshState class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MeshState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MeshState_Auth_RawValue(MeshState *message) {
  GPBDescriptor *descriptor = [MeshState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeshState_FieldNumber_Auth];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMeshState_Auth_RawValue(MeshState *message, int32_t value) {
  GPBDescriptor *descriptor = [MeshState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeshState_FieldNumber_Auth];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - WifiSetConfigRequest

@implementation WifiSetConfigRequest

@dynamic hasWifiConfig, wifiConfig;

typedef struct WifiSetConfigRequest__storage_ {
  uint32_t _has_storage_[1];
  WifiConfig *wifiConfig;
} WifiSetConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wifiConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiConfig),
        .number = WifiSetConfigRequest_FieldNumber_WifiConfig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiSetConfigRequest__storage_, wifiConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetConfigRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiSetConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiSetConfigResponse

@implementation WifiSetConfigResponse

@dynamic hasUpdatedWifiConfig, updatedWifiConfig;

typedef struct WifiSetConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  WifiConfig *updatedWifiConfig;
} WifiSetConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "updatedWifiConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiConfig),
        .number = WifiSetConfigResponse_FieldNumber_UpdatedWifiConfig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiSetConfigResponse__storage_, updatedWifiConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetConfigResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiSetConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetConfigRequest

@implementation WifiGetConfigRequest


typedef struct WifiGetConfigRequest__storage_ {
  uint32_t _has_storage_[1];
} WifiGetConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetConfigRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiGetConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetConfigResponse

@implementation WifiGetConfigResponse

@dynamic hasWifiConfig, wifiConfig;

typedef struct WifiGetConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  WifiConfig *wifiConfig;
} WifiGetConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wifiConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiConfig),
        .number = WifiGetConfigResponse_FieldNumber_WifiConfig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetConfigResponse__storage_, wifiConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetConfigResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetNetworkConfigRequest

@implementation WifiGetNetworkConfigRequest


typedef struct WifiGetNetworkConfigRequest__storage_ {
  uint32_t _has_storage_[1];
} WifiGetNetworkConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetNetworkConfigRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiGetNetworkConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetNetworkConfigResponse

@implementation WifiGetNetworkConfigResponse

@dynamic hasWifiConfig, wifiConfig;

typedef struct WifiGetNetworkConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  WifiConfig *wifiConfig;
} WifiGetNetworkConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wifiConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiConfig),
        .number = WifiGetNetworkConfigResponse_FieldNumber_WifiConfig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetNetworkConfigResponse__storage_, wifiConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetNetworkConfigResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetNetworkConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiSetMeshDeviceTrustRequest

@implementation WifiSetMeshDeviceTrustRequest

@dynamic deviceId;
@dynamic auth;

typedef struct WifiSetMeshDeviceTrustRequest__storage_ {
  uint32_t _has_storage_[1];
  MeshAuth auth;
  NSString *deviceId;
} WifiSetMeshDeviceTrustRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiSetMeshDeviceTrustRequest_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiSetMeshDeviceTrustRequest__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "auth",
        .dataTypeSpecific.enumDescFunc = MeshAuth_EnumDescriptor,
        .number = WifiSetMeshDeviceTrustRequest_FieldNumber_Auth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiSetMeshDeviceTrustRequest__storage_, auth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetMeshDeviceTrustRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiSetMeshDeviceTrustRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WifiSetMeshDeviceTrustRequest_Auth_RawValue(WifiSetMeshDeviceTrustRequest *message) {
  GPBDescriptor *descriptor = [WifiSetMeshDeviceTrustRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiSetMeshDeviceTrustRequest_FieldNumber_Auth];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiSetMeshDeviceTrustRequest_Auth_RawValue(WifiSetMeshDeviceTrustRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiSetMeshDeviceTrustRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiSetMeshDeviceTrustRequest_FieldNumber_Auth];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - WifiSetMeshDeviceTrustResponse

@implementation WifiSetMeshDeviceTrustResponse


typedef struct WifiSetMeshDeviceTrustResponse__storage_ {
  uint32_t _has_storage_[1];
} WifiSetMeshDeviceTrustResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetMeshDeviceTrustResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiSetMeshDeviceTrustResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetClientsRequest

@implementation WifiGetClientsRequest


typedef struct WifiGetClientsRequest__storage_ {
  uint32_t _has_storage_[1];
} WifiGetClientsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetClientsRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiGetClientsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetClientsResponse

@implementation WifiGetClientsResponse

@dynamic clientsArray, clientsArray_Count;

typedef struct WifiGetClientsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *clientsArray;
} WifiGetClientsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiClient),
        .number = WifiGetClientsResponse_FieldNumber_ClientsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetClientsResponse__storage_, clientsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetClientsResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetClientsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetHistoryResponse

@implementation WifiGetHistoryResponse

@dynamic current;
@dynamic pingDropRateArray, pingDropRateArray_Count;
@dynamic pingLatencyMsArray, pingLatencyMsArray_Count;

typedef struct WifiGetHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBFloatArray *pingDropRateArray;
  GPBFloatArray *pingLatencyMsArray;
  uint64_t current;
} WifiGetHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetHistoryResponse_FieldNumber_Current,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetHistoryResponse__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pingDropRateArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetHistoryResponse_FieldNumber_PingDropRateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetHistoryResponse__storage_, pingDropRateArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pingLatencyMsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetHistoryResponse_FieldNumber_PingLatencyMsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetHistoryResponse__storage_, pingLatencyMsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetHistoryResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetHistoryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiNewClientConnectedEvent

@implementation WifiNewClientConnectedEvent

@dynamic hasClient, client;

typedef struct WifiNewClientConnectedEvent__storage_ {
  uint32_t _has_storage_[1];
  WifiClient *client;
} WifiNewClientConnectedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiClient),
        .number = WifiNewClientConnectedEvent_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiNewClientConnectedEvent__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiNewClientConnectedEvent class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiNewClientConnectedEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiClient

@implementation WifiClient

@dynamic name;
@dynamic macAddress;
@dynamic ipAddress;
@dynamic signalStrength;
@dynamic channelWidth;
@dynamic hasRxStats, rxStats;
@dynamic hasTxStats, txStats;
@dynamic associatedTimeS;
@dynamic modeStr;
@dynamic iface;
@dynamic snr;
@dynamic psmode;
@dynamic upstreamMacAddress;
@dynamic role;
@dynamic deviceId;

typedef struct WifiClient__storage_ {
  uint32_t _has_storage_[1];
  float signalStrength;
  uint32_t associatedTimeS;
  WifiClient_Interface iface;
  float snr;
  int32_t psmode;
  uint32_t channelWidth;
  WifiClient_Role role;
  NSString *name;
  NSString *macAddress;
  NSString *ipAddress;
  WifiClient_RxStats *rxStats;
  WifiClient_TxStats *txStats;
  NSString *modeStr;
  NSString *upstreamMacAddress;
  NSString *deviceId;
} WifiClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiClient__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_MacAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiClient__storage_, macAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ipAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_IpAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiClient__storage_, ipAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signalStrength",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_SignalStrength,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiClient__storage_, signalStrength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rxStats",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiClient_RxStats),
        .number = WifiClient_FieldNumber_RxStats,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WifiClient__storage_, rxStats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "txStats",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiClient_TxStats),
        .number = WifiClient_FieldNumber_TxStats,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WifiClient__storage_, txStats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "associatedTimeS",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_AssociatedTimeS,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WifiClient__storage_, associatedTimeS),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "modeStr",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_ModeStr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WifiClient__storage_, modeStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iface",
        .dataTypeSpecific.enumDescFunc = WifiClient_Interface_EnumDescriptor,
        .number = WifiClient_FieldNumber_Iface,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WifiClient__storage_, iface),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "snr",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_Snr,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(WifiClient__storage_, snr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "psmode",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_Psmode,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(WifiClient__storage_, psmode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "channelWidth",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_ChannelWidth,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WifiClient__storage_, channelWidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "upstreamMacAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_UpstreamMacAddress,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(WifiClient__storage_, upstreamMacAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = WifiClient_Role_EnumDescriptor,
        .number = WifiClient_FieldNumber_Role,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(WifiClient__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_FieldNumber_DeviceId,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(WifiClient__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiClient class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WifiClient_Iface_RawValue(WifiClient *message) {
  GPBDescriptor *descriptor = [WifiClient descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiClient_FieldNumber_Iface];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiClient_Iface_RawValue(WifiClient *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiClient descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiClient_FieldNumber_Iface];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t WifiClient_Role_RawValue(WifiClient *message) {
  GPBDescriptor *descriptor = [WifiClient descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiClient_FieldNumber_Role];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiClient_Role_RawValue(WifiClient *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiClient descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiClient_FieldNumber_Role];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum WifiClient_Interface

GPBEnumDescriptor *WifiClient_Interface_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Eth\000Rf2Ghz\000Rf5Ghz\000";
    static const int32_t values[] = {
        WifiClient_Interface_Unknown,
        WifiClient_Interface_Eth,
        WifiClient_Interface_Rf2Ghz,
        WifiClient_Interface_Rf5Ghz,
    };
    static const char *extraTextFormatInfo = "\002\002b\202b\000\003b\202b\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WifiClient_Interface)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WifiClient_Interface_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WifiClient_Interface_IsValidValue(int32_t value__) {
  switch (value__) {
    case WifiClient_Interface_Unknown:
    case WifiClient_Interface_Eth:
    case WifiClient_Interface_Rf2Ghz:
    case WifiClient_Interface_Rf5Ghz:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WifiClient_Role

GPBEnumDescriptor *WifiClient_Role_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RoleUnknown\000Client\000Repeater\000Controller\000";
    static const int32_t values[] = {
        WifiClient_Role_RoleUnknown,
        WifiClient_Role_Client,
        WifiClient_Role_Repeater,
        WifiClient_Role_Controller,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WifiClient_Role)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WifiClient_Role_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WifiClient_Role_IsValidValue(int32_t value__) {
  switch (value__) {
    case WifiClient_Role_RoleUnknown:
    case WifiClient_Role_Client:
    case WifiClient_Role_Repeater:
    case WifiClient_Role_Controller:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WifiClient_RxStats

@implementation WifiClient_RxStats

@dynamic bytes;
@dynamic countErrors;
@dynamic nss;
@dynamic rate;

typedef struct WifiClient_RxStats__storage_ {
  uint32_t _has_storage_[1];
  int32_t nss;
  uint32_t rate;
  uint64_t bytes;
  uint64_t countErrors;
} WifiClient_RxStats__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bytes",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_RxStats_FieldNumber_Bytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiClient_RxStats__storage_, bytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "countErrors",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_RxStats_FieldNumber_CountErrors,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiClient_RxStats__storage_, countErrors),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "nss",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_RxStats_FieldNumber_Nss,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiClient_RxStats__storage_, nss),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_RxStats_FieldNumber_Rate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiClient_RxStats__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiClient_RxStats class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiClient_RxStats__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WifiClient)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiClient_TxStats

@implementation WifiClient_TxStats

@dynamic bytes;
@dynamic successBytes;
@dynamic nss;
@dynamic rate;

typedef struct WifiClient_TxStats__storage_ {
  uint32_t _has_storage_[1];
  int32_t nss;
  uint32_t rate;
  uint64_t bytes;
  uint64_t successBytes;
} WifiClient_TxStats__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bytes",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_TxStats_FieldNumber_Bytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiClient_TxStats__storage_, bytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "successBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_TxStats_FieldNumber_SuccessBytes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiClient_TxStats__storage_, successBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "nss",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_TxStats_FieldNumber_Nss,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiClient_TxStats__storage_, nss),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rate",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiClient_TxStats_FieldNumber_Rate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiClient_TxStats__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiClient_TxStats class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiClient_TxStats__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WifiClient)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiSetupRequest

@implementation WifiSetupRequest

@dynamic skip;
@dynamic networkName;
@dynamic networkPassword;

typedef struct WifiSetupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *networkName;
  NSString *networkPassword;
} WifiSetupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skip",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiSetupRequest_FieldNumber_Skip,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "networkName",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiSetupRequest_FieldNumber_NetworkName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiSetupRequest__storage_, networkName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "networkPassword",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiSetupRequest_FieldNumber_NetworkPassword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiSetupRequest__storage_, networkPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetupRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiSetupRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiSetupResponse

@implementation WifiSetupResponse


typedef struct WifiSetupResponse__storage_ {
  uint32_t _has_storage_[1];
} WifiSetupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiSetupResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiSetupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetStatusResponse

@implementation WifiGetStatusResponse

@dynamic hasDeviceInfo, deviceInfo;
@dynamic hasDeviceState, deviceState;
@dynamic captivePortalEnabled;
@dynamic clientsArray, clientsArray_Count;
@dynamic serialNumber;
@dynamic sku;
@dynamic ipv4WanAddress;
@dynamic pingDropRate;
@dynamic pingLatencyMs;
@dynamic rxInvalidNwid2Ghz1MRate;
@dynamic rxInvalidNwid5Ghz1MRate;
@dynamic meshStates, meshStates_Count;
@dynamic newPeersArray, newPeersArray_Count;

typedef struct WifiGetStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  float pingDropRate;
  float pingLatencyMs;
  float rxInvalidNwid2Ghz1MRate;
  float rxInvalidNwid5Ghz1MRate;
  NSMutableArray *clientsArray;
  DeviceInfo *deviceInfo;
  DeviceState *deviceState;
  NSMutableDictionary *meshStates;
  NSMutableArray *newPeersArray;
  NSString *serialNumber;
  NSString *sku;
  NSString *ipv4WanAddress;
} WifiGetStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "captivePortalEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_CaptivePortalEnabled,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "clientsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiClient),
        .number = WifiGetStatusResponse_FieldNumber_ClientsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, clientsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceInfo),
        .number = WifiGetStatusResponse_FieldNumber_DeviceInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, deviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceState",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceState),
        .number = WifiGetStatusResponse_FieldNumber_DeviceState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, deviceState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "meshStates",
        .dataTypeSpecific.clazz = GPBObjCClass(MeshState),
        .number = WifiGetStatusResponse_FieldNumber_MeshStates,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, meshStates),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newPeersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_NewPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, newPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serialNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_SerialNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, serialNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sku",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_Sku,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, sku),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ipv4WanAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_Ipv4WanAddress,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, ipv4WanAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pingDropRate",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_PingDropRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, pingDropRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pingLatencyMs",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_PingLatencyMs,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, pingLatencyMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rxInvalidNwid2Ghz1MRate",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_RxInvalidNwid2Ghz1MRate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, rxInvalidNwid2Ghz1MRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rxInvalidNwid5Ghz1MRate",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiGetStatusResponse_FieldNumber_RxInvalidNwid5Ghz1MRate,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(WifiGetStatusResponse__storage_, rxInvalidNwid5Ghz1MRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetStatusResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetStatusResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\356\007\002\247\244\201#\201!\244\000\357\007\002\247\244\201#\201!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiAuthenticateRequest

@implementation WifiAuthenticateRequest

@dynamic hasChallenge, challenge;

typedef struct WifiAuthenticateRequest__storage_ {
  uint32_t _has_storage_[1];
  SignedData *challenge;
} WifiAuthenticateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "challenge",
        .dataTypeSpecific.clazz = GPBObjCClass(SignedData),
        .number = WifiAuthenticateRequest_FieldNumber_Challenge,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiAuthenticateRequest__storage_, challenge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiAuthenticateRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiAuthenticateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiAuthenticateResponse

@implementation WifiAuthenticateResponse

@dynamic hasWifi, wifi;
@dynamic hasDish, dish;

typedef struct WifiAuthenticateResponse__storage_ {
  uint32_t _has_storage_[1];
  ChallengeResponse *wifi;
  ChallengeResponse *dish;
} WifiAuthenticateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wifi",
        .dataTypeSpecific.clazz = GPBObjCClass(ChallengeResponse),
        .number = WifiAuthenticateResponse_FieldNumber_Wifi,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiAuthenticateResponse__storage_, wifi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dish",
        .dataTypeSpecific.clazz = GPBObjCClass(ChallengeResponse),
        .number = WifiAuthenticateResponse_FieldNumber_Dish,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiAuthenticateResponse__storage_, dish),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiAuthenticateResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiAuthenticateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiAccountBondingEvent

@implementation WifiAccountBondingEvent

@dynamic dishId;

typedef struct WifiAccountBondingEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *dishId;
} WifiAccountBondingEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dishId",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiAccountBondingEvent_FieldNumber_DishId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiAccountBondingEvent__storage_, dishId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiAccountBondingEvent class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiAccountBondingEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiNewPeerEvent

@implementation WifiNewPeerEvent

@dynamic peerId;

typedef struct WifiNewPeerEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *peerId;
} WifiNewPeerEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiNewPeerEvent_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiNewPeerEvent__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiNewPeerEvent class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiNewPeerEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PingMetrics

@implementation PingMetrics

@dynamic latencyMeanMs;
@dynamic latencyStddevMs;
@dynamic latencyMeanMs5M;
@dynamic latencyMeanMs1H;
@dynamic latencyMeanMs1D;
@dynamic dropRate;
@dynamic dropRate5M;
@dynamic dropRate1H;
@dynamic dropRate1D;
@dynamic secondsSinceLastSuccess;
@dynamic secondsSinceLast1SOutage;
@dynamic secondsSinceLast2SOutage;
@dynamic secondsSinceLast5SOutage;
@dynamic secondsSinceLast15SOutage;
@dynamic secondsSinceLast60SOutage;
@dynamic secondsSinceLast300SOutage;
@dynamic happyHours1S1D;
@dynamic happyHours2S1D;
@dynamic happyHours5S1D;

typedef struct PingMetrics__storage_ {
  uint32_t _has_storage_[1];
  float latencyMeanMs;
  float latencyStddevMs;
  float latencyMeanMs5M;
  float latencyMeanMs1H;
  float latencyMeanMs1D;
  float dropRate;
  float dropRate5M;
  float dropRate1H;
  float dropRate1D;
  float secondsSinceLastSuccess;
  float secondsSinceLast1SOutage;
  float secondsSinceLast5SOutage;
  float happyHours1S1D;
  float happyHours5S1D;
  float secondsSinceLast2SOutage;
  float happyHours2S1D;
  float secondsSinceLast15SOutage;
  float secondsSinceLast60SOutage;
  float secondsSinceLast300SOutage;
} PingMetrics__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "latencyMeanMs",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_LatencyMeanMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, latencyMeanMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyStddevMs",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_LatencyStddevMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, latencyStddevMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyMeanMs5M",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_LatencyMeanMs5M,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, latencyMeanMs5M),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyMeanMs1H",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_LatencyMeanMs1H,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, latencyMeanMs1H),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyMeanMs1D",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_LatencyMeanMs1D,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, latencyMeanMs1D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropRate",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_DropRate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, dropRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropRate5M",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_DropRate5M,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, dropRate5M),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropRate1H",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_DropRate1H,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, dropRate1H),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropRate1D",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_DropRate1D,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, dropRate1D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLastSuccess",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLastSuccess,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLastSuccess),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast1SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast1SOutage,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast1SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast5SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast5SOutage,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast5SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "happyHours1S1D",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_HappyHours1S1D,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, happyHours1S1D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "happyHours5S1D",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_HappyHours5S1D,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, happyHours5S1D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast2SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast2SOutage,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast2SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "happyHours2S1D",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_HappyHours2S1D,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, happyHours2S1D),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast15SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast15SOutage,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast15SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast60SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast60SOutage,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast60SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "secondsSinceLast300SOutage",
        .dataTypeSpecific.clazz = Nil,
        .number = PingMetrics_FieldNumber_SecondsSinceLast300SOutage,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PingMetrics__storage_, secondsSinceLast300SOutage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PingMetrics class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PingMetrics__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\003\007\244\242\201!\000\004\007\244\242\201!\000\005\007\244\242\201!\000\007\004\244\201!\000\010\004\244\201!\000\t\004\244\201!\000"
        "\013\007\245\244\201!\246\000\014\007\245\244\201!\246\000\r\005\245\201!\201!\000\016\005\245\201!\201!\000\017\007\245\244\201!\246\000"
        "\020\005\245\201!\201!\000\022\007\245\244\202!\246\000\023\007\245\244\202!\246\000\024\007\245\244\203!\246\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetPingMetricsRequest

@implementation WifiGetPingMetricsRequest


typedef struct WifiGetPingMetricsRequest__storage_ {
  uint32_t _has_storage_[1];
} WifiGetPingMetricsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetPingMetricsRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiGetPingMetricsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetPingMetricsResponse

@implementation WifiGetPingMetricsResponse

@dynamic hasInternet, internet;

typedef struct WifiGetPingMetricsResponse__storage_ {
  uint32_t _has_storage_[1];
  PingMetrics *internet;
} WifiGetPingMetricsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "internet",
        .dataTypeSpecific.clazz = GPBObjCClass(PingMetrics),
        .number = WifiGetPingMetricsResponse_FieldNumber_Internet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetPingMetricsResponse__storage_, internet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetPingMetricsResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetPingMetricsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetDiagnosticsRequest

@implementation WifiGetDiagnosticsRequest


typedef struct WifiGetDiagnosticsRequest__storage_ {
  uint32_t _has_storage_[1];
} WifiGetDiagnosticsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetDiagnosticsRequest class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WifiGetDiagnosticsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetDiagnosticsResponse

@implementation WifiGetDiagnosticsResponse

@dynamic hasNetworkScan, networkScan;
@dynamic wifiNetworksArray, wifiNetworksArray_Count;

typedef struct WifiGetDiagnosticsResponse__storage_ {
  uint32_t _has_storage_[1];
  WifiScanResults *networkScan;
  NSMutableArray *wifiNetworksArray;
} WifiGetDiagnosticsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "networkScan",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiScanResults),
        .number = WifiGetDiagnosticsResponse_FieldNumber_NetworkScan,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetDiagnosticsResponse__storage_, networkScan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiNetworksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiNetwork),
        .number = WifiGetDiagnosticsResponse_FieldNumber_WifiNetworksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiGetDiagnosticsResponse__storage_, wifiNetworksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetDiagnosticsResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetDiagnosticsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiScanResults

@implementation WifiScanResults

@dynamic networksArray, networksArray_Count;

typedef struct WifiScanResults__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *networksArray;
} WifiScanResults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "networksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiScanResults_Network),
        .number = WifiScanResults_FieldNumber_NetworksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiScanResults__storage_, networksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiScanResults class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiScanResults__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiScanResults_Network

@implementation WifiScanResults_Network

@dynamic source;
@dynamic ssid;
@dynamic bssid;
@dynamic frequencyGhz;
@dynamic channel;
@dynamic signalLevelDbm;
@dynamic noiseLevelDbm;
@dynamic hasEncryptionKey;
@dynamic phyModeStr;

typedef struct WifiScanResults_Network__storage_ {
  uint32_t _has_storage_[1];
  WifiScanResults_Network_Source source;
  int32_t channel;
  int32_t signalLevelDbm;
  int32_t noiseLevelDbm;
  NSString *ssid;
  NSString *bssid;
  NSString *frequencyGhz;
  NSString *phyModeStr;
} WifiScanResults_Network__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "source",
        .dataTypeSpecific.enumDescFunc = WifiScanResults_Network_Source_EnumDescriptor,
        .number = WifiScanResults_Network_FieldNumber_Source,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ssid",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_Ssid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, ssid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bssid",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_Bssid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, bssid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "frequencyGhz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_FrequencyGhz,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, frequencyGhz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_Channel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "signalLevelDbm",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_SignalLevelDbm,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, signalLevelDbm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "noiseLevelDbm",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_NoiseLevelDbm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, noiseLevelDbm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasEncryptionKey",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_HasEncryptionKey,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "phyModeStr",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiScanResults_Network_FieldNumber_PhyModeStr,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WifiScanResults_Network__storage_, phyModeStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiScanResults_Network class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiScanResults_Network__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WifiScanResults)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WifiScanResults_Network_Source_RawValue(WifiScanResults_Network *message) {
  GPBDescriptor *descriptor = [WifiScanResults_Network descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiScanResults_Network_FieldNumber_Source];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiScanResults_Network_Source_RawValue(WifiScanResults_Network *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiScanResults_Network descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiScanResults_Network_FieldNumber_Source];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum WifiScanResults_Network_Source

GPBEnumDescriptor *WifiScanResults_Network_Source_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Scan24Ghz\000Scan5Ghz\000";
    static const int32_t values[] = {
        WifiScanResults_Network_Source_Unknown,
        WifiScanResults_Network_Source_Scan24Ghz,
        WifiScanResults_Network_Source_Scan5Ghz,
    };
    static const char *extraTextFormatInfo = "\002\001d\201\202b\000\002d\202b\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WifiScanResults_Network_Source)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WifiScanResults_Network_Source_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WifiScanResults_Network_Source_IsValidValue(int32_t value__) {
  switch (value__) {
    case WifiScanResults_Network_Source_Unknown:
    case WifiScanResults_Network_Source_Scan24Ghz:
    case WifiScanResults_Network_Source_Scan5Ghz:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WifiNetwork

@implementation WifiNetwork

@dynamic band;
@dynamic ssid;
@dynamic channel;
@dynamic encryptionTypeStr;

typedef struct WifiNetwork__storage_ {
  uint32_t _has_storage_[1];
  WifiNetwork_Band band;
  uint32_t channel;
  NSString *ssid;
  NSString *encryptionTypeStr;
} WifiNetwork__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "band",
        .dataTypeSpecific.enumDescFunc = WifiNetwork_Band_EnumDescriptor,
        .number = WifiNetwork_FieldNumber_Band,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiNetwork__storage_, band),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ssid",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiNetwork_FieldNumber_Ssid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiNetwork__storage_, ssid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiNetwork_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiNetwork__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "encryptionTypeStr",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiNetwork_FieldNumber_EncryptionTypeStr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiNetwork__storage_, encryptionTypeStr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiNetwork class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiNetwork__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WifiNetwork_Band_RawValue(WifiNetwork *message) {
  GPBDescriptor *descriptor = [WifiNetwork descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiNetwork_FieldNumber_Band];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiNetwork_Band_RawValue(WifiNetwork *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiNetwork descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiNetwork_FieldNumber_Band];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum WifiNetwork_Band

GPBEnumDescriptor *WifiNetwork_Band_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WifiUnknown\000Wifi24Ghz\000Wifi5Ghz\000";
    static const int32_t values[] = {
        WifiNetwork_Band_WifiUnknown,
        WifiNetwork_Band_Wifi24Ghz,
        WifiNetwork_Band_Wifi5Ghz,
    };
    static const char *extraTextFormatInfo = "\002\001d\201\202b\000\002d\202b\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WifiNetwork_Band)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WifiNetwork_Band_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WifiNetwork_Band_IsValidValue(int32_t value__) {
  switch (value__) {
    case WifiNetwork_Band_WifiUnknown:
    case WifiNetwork_Band_Wifi24Ghz:
    case WifiNetwork_Band_Wifi5Ghz:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WifiPersistentStats

@implementation WifiPersistentStats

@dynamic hasFactoryResetButton, factoryResetButton;
@dynamic hasFactoryResetPlugUnplug, factoryResetPlugUnplug;
@dynamic hasFactoryResetCommand, factoryResetCommand;
@dynamic hasFactoryResetFailedLoadWifiConfig, factoryResetFailedLoadWifiConfig;
@dynamic hasRebootFromSoftwareUpdate, rebootFromSoftwareUpdate;

typedef struct WifiPersistentStats__storage_ {
  uint32_t _has_storage_[1];
  WifiPersistentStats_Event *factoryResetButton;
  WifiPersistentStats_Event *factoryResetPlugUnplug;
  WifiPersistentStats_Event *factoryResetCommand;
  WifiPersistentStats_Event *factoryResetFailedLoadWifiConfig;
  WifiPersistentStats_Event *rebootFromSoftwareUpdate;
} WifiPersistentStats__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "factoryResetButton",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats_Event),
        .number = WifiPersistentStats_FieldNumber_FactoryResetButton,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiPersistentStats__storage_, factoryResetButton),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "factoryResetPlugUnplug",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats_Event),
        .number = WifiPersistentStats_FieldNumber_FactoryResetPlugUnplug,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiPersistentStats__storage_, factoryResetPlugUnplug),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "factoryResetCommand",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats_Event),
        .number = WifiPersistentStats_FieldNumber_FactoryResetCommand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WifiPersistentStats__storage_, factoryResetCommand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "factoryResetFailedLoadWifiConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats_Event),
        .number = WifiPersistentStats_FieldNumber_FactoryResetFailedLoadWifiConfig,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiPersistentStats__storage_, factoryResetFailedLoadWifiConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rebootFromSoftwareUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats_Event),
        .number = WifiPersistentStats_FieldNumber_RebootFromSoftwareUpdate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WifiPersistentStats__storage_, rebootFromSoftwareUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiPersistentStats class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiPersistentStats__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiPersistentStats_Event

@implementation WifiPersistentStats_Event

@dynamic count;
@dynamic lastOccurredTimestamp;

typedef struct WifiPersistentStats_Event__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  int64_t lastOccurredTimestamp;
} WifiPersistentStats_Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiPersistentStats_Event_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiPersistentStats_Event__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastOccurredTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiPersistentStats_Event_FieldNumber_LastOccurredTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WifiPersistentStats_Event__storage_, lastOccurredTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiPersistentStats_Event class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiPersistentStats_Event__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(WifiPersistentStats)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WifiGetPersistentStatsResponse

@implementation WifiGetPersistentStatsResponse

@dynamic hasStats, stats;

typedef struct WifiGetPersistentStatsResponse__storage_ {
  uint32_t _has_storage_[1];
  WifiPersistentStats *stats;
} WifiGetPersistentStatsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stats",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiPersistentStats),
        .number = WifiGetPersistentStatsResponse_FieldNumber_Stats,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiGetPersistentStatsResponse__storage_, stats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiGetPersistentStatsResponse class]
                                     rootClass:[WifiRoot class]
                                          file:WifiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiGetPersistentStatsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
