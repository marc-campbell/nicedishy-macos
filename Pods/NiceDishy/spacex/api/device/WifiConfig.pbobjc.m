// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacex/api/device/wifi_config.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "spacex/api/device/WifiConfig.pbobjc.h"
#import "spacex/api/device/Command.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(PublicKey);
GPBObjCClassDeclaration(WifiConfig);

#pragma mark - WifiConfigRoot

@implementation WifiConfigRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WifiConfigRoot_FileDescriptor

static GPBFileDescriptor *WifiConfigRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"SpaceX.API.Device"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MeshAuth

GPBEnumDescriptor *MeshAuth_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MeshAuthUnknown\000MeshAuthNew\000MeshAuthTrus"
        "ted\000MeshAuthUntrusted\000";
    static const int32_t values[] = {
        MeshAuth_MeshAuthUnknown,
        MeshAuth_MeshAuthNew,
        MeshAuth_MeshAuthTrusted,
        MeshAuth_MeshAuthUntrusted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MeshAuth)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MeshAuth_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MeshAuth_IsValidValue(int32_t value__) {
  switch (value__) {
    case MeshAuth_MeshAuthUnknown:
    case MeshAuth_MeshAuthNew:
    case MeshAuth_MeshAuthTrusted:
    case MeshAuth_MeshAuthUntrusted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WifiConfig

@implementation WifiConfig

@dynamic networkName;
@dynamic applyNetworkName;
@dynamic networkPassword;
@dynamic applyNetworkPassword;
@dynamic countryCode;
@dynamic lanIpv4;
@dynamic lanIpv4SubnetMask;
@dynamic setupComplete;
@dynamic applySetupComplete;
@dynamic factoryResetTicker;
@dynamic version;
@dynamic wifiSecurity;
@dynamic applyWifiSecurity;
@dynamic networkName5Ghz;
@dynamic applyNetworkName5Ghz;
@dynamic macWan;
@dynamic applyMacWan;
@dynamic macLan;
@dynamic applyMacLan;
@dynamic macLan2Ghz;
@dynamic applyMacLan2Ghz;
@dynamic macLan5Ghz;
@dynamic applyMacLan5Ghz;
@dynamic deviceId;
@dynamic disable2Ghz;
@dynamic applyDisable2Ghz;
@dynamic disable5Ghz;
@dynamic applyDisable5Ghz;
@dynamic disableHidden;
@dynamic applyDisableHidden;
@dynamic channel2Ghz;
@dynamic applyChannel2Ghz;
@dynamic channel5Ghz;
@dynamic applyChannel5Ghz;
@dynamic meshAuths, meshAuths_Count;
@dynamic applyMeshAuths;
@dynamic meshUpstreamsArray, meshUpstreamsArray_Count;
@dynamic applyMeshUpstreams;
@dynamic trustedPeersArray, trustedPeersArray_Count;
@dynamic applyTrustedPeers;
@dynamic distrustedPeersArray, distrustedPeersArray_Count;
@dynamic applyDistrustedPeers;
@dynamic dynamicKeysArray, dynamicKeysArray_Count;
@dynamic isRepeater;
@dynamic applyIsRepeater;
@dynamic experimentsEnableMesh;
@dynamic applyExperimentsEnableMesh;
@dynamic bootCount;
@dynamic htBandwidth;
@dynamic vhtBandwidth;
@dynamic wirelessMode2Ghz;
@dynamic wirelessMode5Ghz;
@dynamic nameserversArray, nameserversArray_Count;
@dynamic applyNameservers;

typedef struct WifiConfig__storage_ {
  uint32_t _has_storage_[3];
  uint32_t factoryResetTicker;
  uint32_t version;
  WifiConfig_Security wifiSecurity;
  uint32_t channel2Ghz;
  uint32_t channel5Ghz;
  int32_t bootCount;
  NSString *networkName;
  NSString *networkPassword;
  NSString *countryCode;
  NSString *lanIpv4;
  NSString *lanIpv4SubnetMask;
  NSString *networkName5Ghz;
  NSString *macWan;
  NSString *macLan;
  NSString *macLan2Ghz;
  NSString *macLan5Ghz;
  NSString *deviceId;
  GPBStringEnumDictionary *meshAuths;
  NSMutableArray *dynamicKeysArray;
  NSMutableArray *meshUpstreamsArray;
  NSMutableArray *trustedPeersArray;
  NSMutableArray *distrustedPeersArray;
  NSMutableArray *nameserversArray;
  NSString *htBandwidth;
  NSString *vhtBandwidth;
  NSString *wirelessMode2Ghz;
  NSString *wirelessMode5Ghz;
} WifiConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "networkName",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_NetworkName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, networkName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "networkPassword",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_NetworkPassword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, networkPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countryCode",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_CountryCode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, countryCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lanIpv4",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_LanIpv4,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, lanIpv4),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lanIpv4SubnetMask",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_LanIpv4SubnetMask,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, lanIpv4SubnetMask),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "setupComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_SetupComplete,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "factoryResetTicker",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_FactoryResetTicker,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, factoryResetTicker),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_Version,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "wifiSecurity",
        .dataTypeSpecific.enumDescFunc = WifiConfig_Security_EnumDescriptor,
        .number = WifiConfig_FieldNumber_WifiSecurity,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, wifiSecurity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "networkName5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_NetworkName5Ghz,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, networkName5Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macWan",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_MacWan,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, macWan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macLan",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_MacLan,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, macLan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macLan2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_MacLan2Ghz,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, macLan2Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macLan5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_MacLan5Ghz,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, macLan5Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_DeviceId,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "disable2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_Disable2Ghz,
        .hasIndex = 34,
        .offset = 35,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "disable5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_Disable5Ghz,
        .hasIndex = 38,
        .offset = 39,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "channel2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_Channel2Ghz,
        .hasIndex = 46,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, channel2Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "channel5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_Channel5Ghz,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, channel5Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "meshAuths",
        .dataTypeSpecific.enumDescFunc = MeshAuth_EnumDescriptor,
        .number = WifiConfig_FieldNumber_MeshAuths,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, meshAuths),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dynamicKeysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PublicKey),
        .number = WifiConfig_FieldNumber_DynamicKeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, dynamicKeysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRepeater",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_IsRepeater,
        .hasIndex = 60,
        .offset = 61,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "experimentsEnableMesh",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ExperimentsEnableMesh,
        .hasIndex = 64,
        .offset = 65,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "meshUpstreamsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_MeshUpstreamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, meshUpstreamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bootCount",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_BootCount,
        .hasIndex = 68,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, bootCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "trustedPeersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_TrustedPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, trustedPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "distrustedPeersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_DistrustedPeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, distrustedPeersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "disableHidden",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_DisableHidden,
        .hasIndex = 42,
        .offset = 43,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nameserversArray",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_NameserversArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, nameserversArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyNetworkName",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyNetworkName,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyNetworkPassword",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyNetworkPassword,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyWifiSecurity",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyWifiSecurity,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyNetworkName5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyNetworkName5Ghz,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMacWan",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMacWan,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMacLan",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMacLan,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMacLan2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMacLan2Ghz,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMacLan5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMacLan5Ghz,
        .hasIndex = 31,
        .offset = 32,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applySetupComplete",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplySetupComplete,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyDisable2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyDisable2Ghz,
        .hasIndex = 36,
        .offset = 37,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyDisable5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyDisable5Ghz,
        .hasIndex = 40,
        .offset = 41,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyChannel2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyChannel2Ghz,
        .hasIndex = 47,
        .offset = 48,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyChannel5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyChannel5Ghz,
        .hasIndex = 50,
        .offset = 51,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyDisableHidden",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyDisableHidden,
        .hasIndex = 44,
        .offset = 45,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMeshAuths",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMeshAuths,
        .hasIndex = 52,
        .offset = 53,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyIsRepeater",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyIsRepeater,
        .hasIndex = 62,
        .offset = 63,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyExperimentsEnableMesh",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyExperimentsEnableMesh,
        .hasIndex = 66,
        .offset = 67,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyMeshUpstreams",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyMeshUpstreams,
        .hasIndex = 54,
        .offset = 55,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyTrustedPeers",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyTrustedPeers,
        .hasIndex = 56,
        .offset = 57,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyDistrustedPeers",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyDistrustedPeers,
        .hasIndex = 58,
        .offset = 59,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "applyNameservers",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_ApplyNameservers,
        .hasIndex = 73,
        .offset = 74,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "htBandwidth",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_HtBandwidth,
        .hasIndex = 69,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, htBandwidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vhtBandwidth",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_VhtBandwidth,
        .hasIndex = 70,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, vhtBandwidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wirelessMode2Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_WirelessMode2Ghz,
        .hasIndex = 71,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, wirelessMode2Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wirelessMode5Ghz",
        .dataTypeSpecific.clazz = Nil,
        .number = WifiConfig_FieldNumber_WirelessMode5Ghz,
        .hasIndex = 72,
        .offset = (uint32_t)offsetof(WifiConfig__storage_, wirelessMode5Ghz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WifiConfig class]
                                     rootClass:[WifiConfigRoot class]
                                          file:WifiConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WifiConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\013\007\244\201#\000\016\003\243\201#\000\017\003\243\201#\000\021\007\201#\000\022\007\201#\000\023\007\201#\000\024\007\201#\000\355"
        "\007\005\247\244\201#\000\360\007\005\243\243\201#\000\361\007\005\243\243\201#\000\363\007\005\247\201#\000\364\007\005\247\201#\000\365\007\005"
        "\247\201#\000\366\007\005\247\201#\000\323\017\010\244\201#\000\324\017\010\244\201#\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WifiConfig_WifiSecurity_RawValue(WifiConfig *message) {
  GPBDescriptor *descriptor = [WifiConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiConfig_FieldNumber_WifiSecurity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWifiConfig_WifiSecurity_RawValue(WifiConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [WifiConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WifiConfig_FieldNumber_WifiSecurity];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum WifiConfig_Security

GPBEnumDescriptor *WifiConfig_Security_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Wpa2\000Wpa3\000Wpa2Wpa3\000";
    static const int32_t values[] = {
        WifiConfig_Security_Unknown,
        WifiConfig_Security_Wpa2,
        WifiConfig_Security_Wpa3,
        WifiConfig_Security_Wpa2Wpa3,
    };
    static const char *extraTextFormatInfo = "\001\003c\002b\001\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WifiConfig_Security)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WifiConfig_Security_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WifiConfig_Security_IsValidValue(int32_t value__) {
  switch (value__) {
    case WifiConfig_Security_Unknown:
    case WifiConfig_Security_Wpa2:
    case WifiConfig_Security_Wpa3:
    case WifiConfig_Security_Wpa2Wpa3:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
