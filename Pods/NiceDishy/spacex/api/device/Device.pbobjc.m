// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spacex/api/device/device.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "spacex/api/device/Device.pbobjc.h"
#import "spacex/api/common/status/Status.pbobjc.h"
#import "spacex/api/device/Command.pbobjc.h"
#import "spacex/api/device/Common.pbobjc.h"
#import "spacex/api/device/Dish.pbobjc.h"
#import "spacex/api/device/Transceiver.pbobjc.h"
#import "spacex/api/device/Wifi.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AuthenticateRequest);
GPBObjCClassDeclaration(ClientPlatform);
GPBObjCClassDeclaration(DeviceInfo);
GPBObjCClassDeclaration(DishAuthenticateResponse);
GPBObjCClassDeclaration(DishGetContextRequest);
GPBObjCClassDeclaration(DishGetContextResponse);
GPBObjCClassDeclaration(DishGetEmcRequest);
GPBObjCClassDeclaration(DishGetEmcResponse);
GPBObjCClassDeclaration(DishGetHistoryResponse);
GPBObjCClassDeclaration(DishGetObstructionMapRequest);
GPBObjCClassDeclaration(DishGetObstructionMapResponse);
GPBObjCClassDeclaration(DishGetStatusResponse);
GPBObjCClassDeclaration(DishSetEmcRequest);
GPBObjCClassDeclaration(DishSetEmcResponse);
GPBObjCClassDeclaration(DishStowRequest);
GPBObjCClassDeclaration(DishStowResponse);
GPBObjCClassDeclaration(ECEFPosition);
GPBObjCClassDeclaration(EnableFlowRequest);
GPBObjCClassDeclaration(EnableFlowResponse);
GPBObjCClassDeclaration(Event);
GPBObjCClassDeclaration(FactoryResetRequest);
GPBObjCClassDeclaration(FactoryResetResponse);
GPBObjCClassDeclaration(FlushTelemRequest);
GPBObjCClassDeclaration(FlushTelemResponse);
GPBObjCClassDeclaration(FuseRequest);
GPBObjCClassDeclaration(FuseResponse);
GPBObjCClassDeclaration(GetConnectionsRequest);
GPBObjCClassDeclaration(GetConnectionsResponse);
GPBObjCClassDeclaration(GetConnectionsResponse_ServiceConnection);
GPBObjCClassDeclaration(GetDeviceInfoRequest);
GPBObjCClassDeclaration(GetDeviceInfoResponse);
GPBObjCClassDeclaration(GetHeapDumpRequest);
GPBObjCClassDeclaration(GetHeapDumpResponse);
GPBObjCClassDeclaration(GetHistoryRequest);
GPBObjCClassDeclaration(GetLocationRequest);
GPBObjCClassDeclaration(GetLocationResponse);
GPBObjCClassDeclaration(GetLogRequest);
GPBObjCClassDeclaration(GetLogResponse);
GPBObjCClassDeclaration(GetNetworkInterfacesRequest);
GPBObjCClassDeclaration(GetNetworkInterfacesResponse);
GPBObjCClassDeclaration(GetNextIdRequest);
GPBObjCClassDeclaration(GetNextIdResponse);
GPBObjCClassDeclaration(GetPersistentStatsRequest);
GPBObjCClassDeclaration(GetPingRequest);
GPBObjCClassDeclaration(GetPingResponse);
GPBObjCClassDeclaration(GetStatusRequest);
GPBObjCClassDeclaration(LLAPosition);
GPBObjCClassDeclaration(NetworkInterface);
GPBObjCClassDeclaration(PingHostRequest);
GPBObjCClassDeclaration(PingHostResponse);
GPBObjCClassDeclaration(PingResult);
GPBObjCClassDeclaration(PublicKey);
GPBObjCClassDeclaration(RebootRequest);
GPBObjCClassDeclaration(RebootResponse);
GPBObjCClassDeclaration(Request);
GPBObjCClassDeclaration(Response);
GPBObjCClassDeclaration(RestartControlRequest);
GPBObjCClassDeclaration(RestartControlResponse);
GPBObjCClassDeclaration(SetSkuRequest);
GPBObjCClassDeclaration(SetSkuResponse);
GPBObjCClassDeclaration(SetTrustedKeysRequest);
GPBObjCClassDeclaration(SetTrustedKeysResponse);
GPBObjCClassDeclaration(SignedData);
GPBObjCClassDeclaration(SpeedTestRequest);
GPBObjCClassDeclaration(SpeedTestResponse);
GPBObjCClassDeclaration(SpeedTestStats);
GPBObjCClassDeclaration(Status);
GPBObjCClassDeclaration(TransceiverGetStatusRequest);
GPBObjCClassDeclaration(TransceiverGetStatusResponse);
GPBObjCClassDeclaration(TransceiverGetTelemetryRequest);
GPBObjCClassDeclaration(TransceiverGetTelemetryResponse);
GPBObjCClassDeclaration(TransceiverIFLoopbackTestRequest);
GPBObjCClassDeclaration(TransceiverIFLoopbackTestResponse);
GPBObjCClassDeclaration(UpdateRequest);
GPBObjCClassDeclaration(UpdateResponse);
GPBObjCClassDeclaration(WifiAccountBondingEvent);
GPBObjCClassDeclaration(WifiAuthenticateResponse);
GPBObjCClassDeclaration(WifiGetClientsRequest);
GPBObjCClassDeclaration(WifiGetClientsResponse);
GPBObjCClassDeclaration(WifiGetConfigRequest);
GPBObjCClassDeclaration(WifiGetConfigResponse);
GPBObjCClassDeclaration(WifiGetDiagnosticsRequest);
GPBObjCClassDeclaration(WifiGetDiagnosticsResponse);
GPBObjCClassDeclaration(WifiGetHistoryResponse);
GPBObjCClassDeclaration(WifiGetNetworkConfigRequest);
GPBObjCClassDeclaration(WifiGetNetworkConfigResponse);
GPBObjCClassDeclaration(WifiGetPersistentStatsResponse);
GPBObjCClassDeclaration(WifiGetPingMetricsRequest);
GPBObjCClassDeclaration(WifiGetPingMetricsResponse);
GPBObjCClassDeclaration(WifiGetStatusResponse);
GPBObjCClassDeclaration(WifiNewClientConnectedEvent);
GPBObjCClassDeclaration(WifiNewPeerEvent);
GPBObjCClassDeclaration(WifiSetConfigRequest);
GPBObjCClassDeclaration(WifiSetConfigResponse);
GPBObjCClassDeclaration(WifiSetMeshDeviceTrustRequest);
GPBObjCClassDeclaration(WifiSetMeshDeviceTrustResponse);
GPBObjCClassDeclaration(WifiSetupRequest);
GPBObjCClassDeclaration(WifiSetupResponse);

#pragma mark - DeviceRoot

@implementation DeviceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DeviceRoot_FileDescriptor

static GPBFileDescriptor *DeviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"SpaceX.API.Device"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ToDevice

@implementation ToDevice

@dynamic messageOneOfCase;
@dynamic request;

typedef struct ToDevice__storage_ {
  uint32_t _has_storage_[2];
  Request *request;
} ToDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "request",
        .dataTypeSpecific.clazz = GPBObjCClass(Request),
        .number = ToDevice_FieldNumber_Request,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ToDevice__storage_, request),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ToDevice class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ToDevice__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "message",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ToDevice_ClearMessageOneOfCase(ToDevice *message) {
  GPBDescriptor *descriptor = [ToDevice descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - FromDevice

@implementation FromDevice

@dynamic messageOneOfCase;
@dynamic response;
@dynamic event;

typedef struct FromDevice__storage_ {
  uint32_t _has_storage_[2];
  Response *response;
  Event *event;
} FromDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "response",
        .dataTypeSpecific.clazz = GPBObjCClass(Response),
        .number = FromDevice_FieldNumber_Response,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FromDevice__storage_, response),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "event",
        .dataTypeSpecific.clazz = GPBObjCClass(Event),
        .number = FromDevice_FieldNumber_Event,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FromDevice__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FromDevice class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FromDevice__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "message",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FromDevice_ClearMessageOneOfCase(FromDevice *message) {
  GPBDescriptor *descriptor = [FromDevice descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Request

@implementation Request

@dynamic requestOneOfCase;
@dynamic id_p;
@dynamic epochId;
@dynamic targetId;
@dynamic signedRequest;
@dynamic getNextId;
@dynamic authenticate;
@dynamic enableFlow;
@dynamic factoryReset;
@dynamic getDeviceInfo;
@dynamic getHistory;
@dynamic getLog;
@dynamic getNetworkInterfaces;
@dynamic getPing;
@dynamic pingHost;
@dynamic getStatus;
@dynamic reboot;
@dynamic setSku;
@dynamic setTrustedKeys;
@dynamic speedTest;
@dynamic update;
@dynamic getLocation;
@dynamic getHeapDump;
@dynamic restartControl;
@dynamic fuse;
@dynamic getPersistentStats;
@dynamic getConnections;
@dynamic flushTelem;
@dynamic dishStow;
@dynamic dishGetContext;
@dynamic dishGetObstructionMap;
@dynamic dishSetEmc;
@dynamic dishGetEmc;
@dynamic transceiverIfLoopbackTest;
@dynamic transceiverGetStatus;
@dynamic transceiverGetTelemetry;
@dynamic wifiGetClients;
@dynamic wifiGetDiagnostics;
@dynamic wifiGetPingMetrics;
@dynamic wifiSetConfig;
@dynamic wifiGetConfig;
@dynamic wifiSetup;
@dynamic wifiGetNetworkConfig;
@dynamic wifiSetMeshDeviceTrust;

typedef struct Request__storage_ {
  uint32_t _has_storage_[2];
  NSString *targetId;
  SignedData *signedRequest;
  RebootRequest *reboot;
  SpeedTestRequest *speedTest;
  GetStatusRequest *getStatus;
  AuthenticateRequest *authenticate;
  GetNextIdRequest *getNextId;
  GetHistoryRequest *getHistory;
  GetDeviceInfoRequest *getDeviceInfo;
  GetPingRequest *getPing;
  SetTrustedKeysRequest *setTrustedKeys;
  FactoryResetRequest *factoryReset;
  GetLogRequest *getLog;
  SetSkuRequest *setSku;
  UpdateRequest *update;
  GetNetworkInterfacesRequest *getNetworkInterfaces;
  PingHostRequest *pingHost;
  GetLocationRequest *getLocation;
  EnableFlowRequest *enableFlow;
  GetHeapDumpRequest *getHeapDump;
  RestartControlRequest *restartControl;
  FuseRequest *fuse;
  GetPersistentStatsRequest *getPersistentStats;
  GetConnectionsRequest *getConnections;
  FlushTelemRequest *flushTelem;
  DishStowRequest *dishStow;
  DishGetContextRequest *dishGetContext;
  DishSetEmcRequest *dishSetEmc;
  DishGetObstructionMapRequest *dishGetObstructionMap;
  DishGetEmcRequest *dishGetEmc;
  WifiSetConfigRequest *wifiSetConfig;
  WifiGetClientsRequest *wifiGetClients;
  WifiSetupRequest *wifiSetup;
  WifiGetPingMetricsRequest *wifiGetPingMetrics;
  WifiGetDiagnosticsRequest *wifiGetDiagnostics;
  WifiGetConfigRequest *wifiGetConfig;
  WifiGetNetworkConfigRequest *wifiGetNetworkConfig;
  WifiSetMeshDeviceTrustRequest *wifiSetMeshDeviceTrust;
  TransceiverIFLoopbackTestRequest *transceiverIfLoopbackTest;
  TransceiverGetStatusRequest *transceiverGetStatus;
  TransceiverGetTelemetryRequest *transceiverGetTelemetry;
  uint64_t id_p;
  uint64_t epochId;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Request_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = Nil,
        .number = Request_FieldNumber_TargetId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Request__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "epochId",
        .dataTypeSpecific.clazz = Nil,
        .number = Request_FieldNumber_EpochId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, epochId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signedRequest",
        .dataTypeSpecific.clazz = GPBObjCClass(SignedData),
        .number = Request_FieldNumber_SignedRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, signedRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reboot",
        .dataTypeSpecific.clazz = GPBObjCClass(RebootRequest),
        .number = Request_FieldNumber_Reboot,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, reboot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speedTest",
        .dataTypeSpecific.clazz = GPBObjCClass(SpeedTestRequest),
        .number = Request_FieldNumber_SpeedTest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, speedTest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(GetStatusRequest),
        .number = Request_FieldNumber_GetStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authenticate",
        .dataTypeSpecific.clazz = GPBObjCClass(AuthenticateRequest),
        .number = Request_FieldNumber_Authenticate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, authenticate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getNextId",
        .dataTypeSpecific.clazz = GPBObjCClass(GetNextIdRequest),
        .number = Request_FieldNumber_GetNextId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getNextId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getHistory",
        .dataTypeSpecific.clazz = GPBObjCClass(GetHistoryRequest),
        .number = Request_FieldNumber_GetHistory,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getHistory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getDeviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(GetDeviceInfoRequest),
        .number = Request_FieldNumber_GetDeviceInfo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getDeviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPing",
        .dataTypeSpecific.clazz = GPBObjCClass(GetPingRequest),
        .number = Request_FieldNumber_GetPing,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getPing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setTrustedKeys",
        .dataTypeSpecific.clazz = GPBObjCClass(SetTrustedKeysRequest),
        .number = Request_FieldNumber_SetTrustedKeys,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, setTrustedKeys),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "factoryReset",
        .dataTypeSpecific.clazz = GPBObjCClass(FactoryResetRequest),
        .number = Request_FieldNumber_FactoryReset,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, factoryReset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getLog",
        .dataTypeSpecific.clazz = GPBObjCClass(GetLogRequest),
        .number = Request_FieldNumber_GetLog,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getLog),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setSku",
        .dataTypeSpecific.clazz = GPBObjCClass(SetSkuRequest),
        .number = Request_FieldNumber_SetSku,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, setSku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateRequest),
        .number = Request_FieldNumber_Update,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getNetworkInterfaces",
        .dataTypeSpecific.clazz = GPBObjCClass(GetNetworkInterfacesRequest),
        .number = Request_FieldNumber_GetNetworkInterfaces,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getNetworkInterfaces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pingHost",
        .dataTypeSpecific.clazz = GPBObjCClass(PingHostRequest),
        .number = Request_FieldNumber_PingHost,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, pingHost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(GetLocationRequest),
        .number = Request_FieldNumber_GetLocation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enableFlow",
        .dataTypeSpecific.clazz = GPBObjCClass(EnableFlowRequest),
        .number = Request_FieldNumber_EnableFlow,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, enableFlow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getHeapDump",
        .dataTypeSpecific.clazz = GPBObjCClass(GetHeapDumpRequest),
        .number = Request_FieldNumber_GetHeapDump,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getHeapDump),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "restartControl",
        .dataTypeSpecific.clazz = GPBObjCClass(RestartControlRequest),
        .number = Request_FieldNumber_RestartControl,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, restartControl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fuse",
        .dataTypeSpecific.clazz = GPBObjCClass(FuseRequest),
        .number = Request_FieldNumber_Fuse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, fuse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPersistentStats",
        .dataTypeSpecific.clazz = GPBObjCClass(GetPersistentStatsRequest),
        .number = Request_FieldNumber_GetPersistentStats,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getPersistentStats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getConnections",
        .dataTypeSpecific.clazz = GPBObjCClass(GetConnectionsRequest),
        .number = Request_FieldNumber_GetConnections,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, getConnections),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flushTelem",
        .dataTypeSpecific.clazz = GPBObjCClass(FlushTelemRequest),
        .number = Request_FieldNumber_FlushTelem,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, flushTelem),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishStow",
        .dataTypeSpecific.clazz = GPBObjCClass(DishStowRequest),
        .number = Request_FieldNumber_DishStow,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, dishStow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetContext",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetContextRequest),
        .number = Request_FieldNumber_DishGetContext,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, dishGetContext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishSetEmc",
        .dataTypeSpecific.clazz = GPBObjCClass(DishSetEmcRequest),
        .number = Request_FieldNumber_DishSetEmc,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, dishSetEmc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetObstructionMap",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetObstructionMapRequest),
        .number = Request_FieldNumber_DishGetObstructionMap,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, dishGetObstructionMap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetEmc",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetEmcRequest),
        .number = Request_FieldNumber_DishGetEmc,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, dishGetEmc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetConfigRequest),
        .number = Request_FieldNumber_WifiSetConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiSetConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetClients",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetClientsRequest),
        .number = Request_FieldNumber_WifiGetClients,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiGetClients),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetup",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetupRequest),
        .number = Request_FieldNumber_WifiSetup,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiSetup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetPingMetrics",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetPingMetricsRequest),
        .number = Request_FieldNumber_WifiGetPingMetrics,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiGetPingMetrics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetDiagnostics",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetDiagnosticsRequest),
        .number = Request_FieldNumber_WifiGetDiagnostics,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiGetDiagnostics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetConfigRequest),
        .number = Request_FieldNumber_WifiGetConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiGetConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetNetworkConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetNetworkConfigRequest),
        .number = Request_FieldNumber_WifiGetNetworkConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiGetNetworkConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetMeshDeviceTrust",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetMeshDeviceTrustRequest),
        .number = Request_FieldNumber_WifiSetMeshDeviceTrust,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, wifiSetMeshDeviceTrust),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverIfLoopbackTest",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverIFLoopbackTestRequest),
        .number = Request_FieldNumber_TransceiverIfLoopbackTest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, transceiverIfLoopbackTest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverGetStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverGetStatusRequest),
        .number = Request_FieldNumber_TransceiverGetStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, transceiverGetStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverGetTelemetry",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverGetTelemetryRequest),
        .number = Request_FieldNumber_TransceiverGetTelemetry,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Request__storage_, transceiverGetTelemetry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "request",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Request_ClearRequestOneOfCase(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Response

@implementation Response

@dynamic responseOneOfCase;
@dynamic id_p;
@dynamic hasStatus, status;
@dynamic apiVersion;
@dynamic getNextId;
@dynamic enableFlow;
@dynamic factoryReset;
@dynamic getDeviceInfo;
@dynamic getLog;
@dynamic getNetworkInterfaces;
@dynamic getPing;
@dynamic pingHost;
@dynamic reboot;
@dynamic speedTest;
@dynamic setSku;
@dynamic setTrustedKeys;
@dynamic update;
@dynamic getLocation;
@dynamic getHeapDump;
@dynamic restartControl;
@dynamic fuse;
@dynamic getConnections;
@dynamic flushTelem;
@dynamic dishAuthenticate;
@dynamic dishGetContext;
@dynamic dishGetHistory;
@dynamic dishGetStatus;
@dynamic dishGetObstructionMap;
@dynamic dishStow;
@dynamic dishSetEmc;
@dynamic dishGetEmc;
@dynamic transceiverIfLoopbackTest;
@dynamic transceiverGetStatus;
@dynamic transceiverGetTelemetry;
@dynamic wifiAuthenticate;
@dynamic wifiGetClients;
@dynamic wifiGetDiagnostics;
@dynamic wifiGetHistory;
@dynamic wifiGetPingMetrics;
@dynamic wifiGetStatus;
@dynamic wifiSetConfig;
@dynamic wifiGetConfig;
@dynamic wifiSetup;
@dynamic wifiGetPersistentStats;
@dynamic wifiGetNetworkConfig;
@dynamic wifiSetMeshDeviceTrust;

typedef struct Response__storage_ {
  uint32_t _has_storage_[2];
  Status *status;
  RebootResponse *reboot;
  SpeedTestResponse *speedTest;
  GetDeviceInfoResponse *getDeviceInfo;
  GetNextIdResponse *getNextId;
  GetPingResponse *getPing;
  SetTrustedKeysResponse *setTrustedKeys;
  FactoryResetResponse *factoryReset;
  GetLogResponse *getLog;
  SetSkuResponse *setSku;
  UpdateResponse *update;
  GetNetworkInterfacesResponse *getNetworkInterfaces;
  PingHostResponse *pingHost;
  GetLocationResponse *getLocation;
  EnableFlowResponse *enableFlow;
  GetHeapDumpResponse *getHeapDump;
  RestartControlResponse *restartControl;
  FuseResponse *fuse;
  GetConnectionsResponse *getConnections;
  FlushTelemResponse *flushTelem;
  DishStowResponse *dishStow;
  DishGetContextResponse *dishGetContext;
  DishGetStatusResponse *dishGetStatus;
  DishAuthenticateResponse *dishAuthenticate;
  DishGetHistoryResponse *dishGetHistory;
  DishSetEmcResponse *dishSetEmc;
  DishGetObstructionMapResponse *dishGetObstructionMap;
  DishGetEmcResponse *dishGetEmc;
  WifiSetConfigResponse *wifiSetConfig;
  WifiGetClientsResponse *wifiGetClients;
  WifiSetupResponse *wifiSetup;
  WifiGetStatusResponse *wifiGetStatus;
  WifiAuthenticateResponse *wifiAuthenticate;
  WifiGetHistoryResponse *wifiGetHistory;
  WifiGetPingMetricsResponse *wifiGetPingMetrics;
  WifiGetDiagnosticsResponse *wifiGetDiagnostics;
  WifiGetConfigResponse *wifiGetConfig;
  WifiGetNetworkConfigResponse *wifiGetNetworkConfig;
  WifiSetMeshDeviceTrustResponse *wifiSetMeshDeviceTrust;
  WifiGetPersistentStatsResponse *wifiGetPersistentStats;
  TransceiverIFLoopbackTestResponse *transceiverIfLoopbackTest;
  TransceiverGetStatusResponse *transceiverGetStatus;
  TransceiverGetTelemetryResponse *transceiverGetTelemetry;
  uint64_t id_p;
  uint64_t apiVersion;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Response_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(Status),
        .number = Response_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "apiVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = Response_FieldNumber_ApiVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Response__storage_, apiVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "reboot",
        .dataTypeSpecific.clazz = GPBObjCClass(RebootResponse),
        .number = Response_FieldNumber_Reboot,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, reboot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speedTest",
        .dataTypeSpecific.clazz = GPBObjCClass(SpeedTestResponse),
        .number = Response_FieldNumber_SpeedTest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, speedTest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getDeviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(GetDeviceInfoResponse),
        .number = Response_FieldNumber_GetDeviceInfo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getDeviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getNextId",
        .dataTypeSpecific.clazz = GPBObjCClass(GetNextIdResponse),
        .number = Response_FieldNumber_GetNextId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getNextId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPing",
        .dataTypeSpecific.clazz = GPBObjCClass(GetPingResponse),
        .number = Response_FieldNumber_GetPing,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getPing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setTrustedKeys",
        .dataTypeSpecific.clazz = GPBObjCClass(SetTrustedKeysResponse),
        .number = Response_FieldNumber_SetTrustedKeys,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, setTrustedKeys),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "factoryReset",
        .dataTypeSpecific.clazz = GPBObjCClass(FactoryResetResponse),
        .number = Response_FieldNumber_FactoryReset,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, factoryReset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getLog",
        .dataTypeSpecific.clazz = GPBObjCClass(GetLogResponse),
        .number = Response_FieldNumber_GetLog,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getLog),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "setSku",
        .dataTypeSpecific.clazz = GPBObjCClass(SetSkuResponse),
        .number = Response_FieldNumber_SetSku,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, setSku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateResponse),
        .number = Response_FieldNumber_Update,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getNetworkInterfaces",
        .dataTypeSpecific.clazz = GPBObjCClass(GetNetworkInterfacesResponse),
        .number = Response_FieldNumber_GetNetworkInterfaces,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getNetworkInterfaces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pingHost",
        .dataTypeSpecific.clazz = GPBObjCClass(PingHostResponse),
        .number = Response_FieldNumber_PingHost,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, pingHost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getLocation",
        .dataTypeSpecific.clazz = GPBObjCClass(GetLocationResponse),
        .number = Response_FieldNumber_GetLocation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enableFlow",
        .dataTypeSpecific.clazz = GPBObjCClass(EnableFlowResponse),
        .number = Response_FieldNumber_EnableFlow,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, enableFlow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getHeapDump",
        .dataTypeSpecific.clazz = GPBObjCClass(GetHeapDumpResponse),
        .number = Response_FieldNumber_GetHeapDump,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getHeapDump),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "restartControl",
        .dataTypeSpecific.clazz = GPBObjCClass(RestartControlResponse),
        .number = Response_FieldNumber_RestartControl,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, restartControl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fuse",
        .dataTypeSpecific.clazz = GPBObjCClass(FuseResponse),
        .number = Response_FieldNumber_Fuse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, fuse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getConnections",
        .dataTypeSpecific.clazz = GPBObjCClass(GetConnectionsResponse),
        .number = Response_FieldNumber_GetConnections,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, getConnections),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flushTelem",
        .dataTypeSpecific.clazz = GPBObjCClass(FlushTelemResponse),
        .number = Response_FieldNumber_FlushTelem,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, flushTelem),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishStow",
        .dataTypeSpecific.clazz = GPBObjCClass(DishStowResponse),
        .number = Response_FieldNumber_DishStow,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishStow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetContext",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetContextResponse),
        .number = Response_FieldNumber_DishGetContext,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishGetContext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetStatusResponse),
        .number = Response_FieldNumber_DishGetStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishGetStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishAuthenticate",
        .dataTypeSpecific.clazz = GPBObjCClass(DishAuthenticateResponse),
        .number = Response_FieldNumber_DishAuthenticate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishAuthenticate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetHistory",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetHistoryResponse),
        .number = Response_FieldNumber_DishGetHistory,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishGetHistory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishSetEmc",
        .dataTypeSpecific.clazz = GPBObjCClass(DishSetEmcResponse),
        .number = Response_FieldNumber_DishSetEmc,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishSetEmc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetObstructionMap",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetObstructionMapResponse),
        .number = Response_FieldNumber_DishGetObstructionMap,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishGetObstructionMap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dishGetEmc",
        .dataTypeSpecific.clazz = GPBObjCClass(DishGetEmcResponse),
        .number = Response_FieldNumber_DishGetEmc,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, dishGetEmc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetConfigResponse),
        .number = Response_FieldNumber_WifiSetConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiSetConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetClients",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetClientsResponse),
        .number = Response_FieldNumber_WifiGetClients,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetClients),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetup",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetupResponse),
        .number = Response_FieldNumber_WifiSetup,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiSetup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetStatusResponse),
        .number = Response_FieldNumber_WifiGetStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiAuthenticate",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiAuthenticateResponse),
        .number = Response_FieldNumber_WifiAuthenticate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiAuthenticate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetHistory",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetHistoryResponse),
        .number = Response_FieldNumber_WifiGetHistory,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetHistory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetPingMetrics",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetPingMetricsResponse),
        .number = Response_FieldNumber_WifiGetPingMetrics,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetPingMetrics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetDiagnostics",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetDiagnosticsResponse),
        .number = Response_FieldNumber_WifiGetDiagnostics,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetDiagnostics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetConfigResponse),
        .number = Response_FieldNumber_WifiGetConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetNetworkConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetNetworkConfigResponse),
        .number = Response_FieldNumber_WifiGetNetworkConfig,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetNetworkConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiSetMeshDeviceTrust",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiSetMeshDeviceTrustResponse),
        .number = Response_FieldNumber_WifiSetMeshDeviceTrust,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiSetMeshDeviceTrust),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiGetPersistentStats",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiGetPersistentStatsResponse),
        .number = Response_FieldNumber_WifiGetPersistentStats,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, wifiGetPersistentStats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverIfLoopbackTest",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverIFLoopbackTestResponse),
        .number = Response_FieldNumber_TransceiverIfLoopbackTest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, transceiverIfLoopbackTest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverGetStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverGetStatusResponse),
        .number = Response_FieldNumber_TransceiverGetStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, transceiverGetStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transceiverGetTelemetry",
        .dataTypeSpecific.clazz = GPBObjCClass(TransceiverGetTelemetryResponse),
        .number = Response_FieldNumber_TransceiverGetTelemetry,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Response__storage_, transceiverGetTelemetry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "response",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Response_ClearResponseOneOfCase(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Event

@implementation Event

@dynamic eventOneOfCase;
@dynamic wifiNewClientConnected;
@dynamic wifiAccountBonding;
@dynamic wifiNewPeer;

typedef struct Event__storage_ {
  uint32_t _has_storage_[2];
  WifiNewClientConnectedEvent *wifiNewClientConnected;
  WifiAccountBondingEvent *wifiAccountBonding;
  WifiNewPeerEvent *wifiNewPeer;
} Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wifiNewClientConnected",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiNewClientConnectedEvent),
        .number = Event_FieldNumber_WifiNewClientConnected,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, wifiNewClientConnected),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiAccountBonding",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiAccountBondingEvent),
        .number = Event_FieldNumber_WifiAccountBonding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, wifiAccountBonding),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wifiNewPeer",
        .dataTypeSpecific.clazz = GPBObjCClass(WifiNewPeerEvent),
        .number = Event_FieldNumber_WifiNewPeer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Event__storage_, wifiNewPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "event",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Event_ClearEventOneOfCase(Event *message) {
  GPBDescriptor *descriptor = [Event descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - EnableFlowRequest

@implementation EnableFlowRequest

@dynamic name;
@dynamic durationH;

typedef struct EnableFlowRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t durationH;
  NSString *name;
} EnableFlowRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = EnableFlowRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnableFlowRequest__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "durationH",
        .dataTypeSpecific.clazz = Nil,
        .number = EnableFlowRequest_FieldNumber_DurationH,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EnableFlowRequest__storage_, durationH),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnableFlowRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnableFlowRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EnableFlowResponse

@implementation EnableFlowResponse


typedef struct EnableFlowResponse__storage_ {
  uint32_t _has_storage_[1];
} EnableFlowResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnableFlowResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(EnableFlowResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlushTelemRequest

@implementation FlushTelemRequest


typedef struct FlushTelemRequest__storage_ {
  uint32_t _has_storage_[1];
} FlushTelemRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FlushTelemRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FlushTelemRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlushTelemResponse

@implementation FlushTelemResponse


typedef struct FlushTelemResponse__storage_ {
  uint32_t _has_storage_[1];
} FlushTelemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FlushTelemResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FlushTelemResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FactoryResetRequest

@implementation FactoryResetRequest


typedef struct FactoryResetRequest__storage_ {
  uint32_t _has_storage_[1];
} FactoryResetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FactoryResetRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FactoryResetRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FactoryResetResponse

@implementation FactoryResetResponse


typedef struct FactoryResetResponse__storage_ {
  uint32_t _has_storage_[1];
} FactoryResetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FactoryResetResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FactoryResetResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FuseRequest

@implementation FuseRequest


typedef struct FuseRequest__storage_ {
  uint32_t _has_storage_[1];
} FuseRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FuseRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FuseRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FuseResponse

@implementation FuseResponse


typedef struct FuseResponse__storage_ {
  uint32_t _has_storage_[1];
} FuseResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FuseResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FuseResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHistoryRequest

@implementation GetHistoryRequest


typedef struct GetHistoryRequest__storage_ {
  uint32_t _has_storage_[1];
} GetHistoryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHistoryRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetHistoryRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLogRequest

@implementation GetLogRequest


typedef struct GetLogRequest__storage_ {
  uint32_t _has_storage_[1];
} GetLogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLogRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetLogRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLogResponse

@implementation GetLogResponse

@dynamic syslog;
@dynamic offlineLog;

typedef struct GetLogResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *syslog;
  NSString *offlineLog;
} GetLogResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "syslog",
        .dataTypeSpecific.clazz = Nil,
        .number = GetLogResponse_FieldNumber_Syslog,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLogResponse__storage_, syslog),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offlineLog",
        .dataTypeSpecific.clazz = Nil,
        .number = GetLogResponse_FieldNumber_OfflineLog,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLogResponse__storage_, offlineLog),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLogResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLogResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPingRequest

@implementation GetPingRequest


typedef struct GetPingRequest__storage_ {
  uint32_t _has_storage_[1];
} GetPingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPingRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetPingRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPingResponse

@implementation GetPingResponse

@dynamic results, results_Count;

typedef struct GetPingResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *results;
} GetPingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "results",
        .dataTypeSpecific.clazz = GPBObjCClass(PingResult),
        .number = GetPingResponse_FieldNumber_Results,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPingResponse__storage_, results),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPingResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPingResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PingHostRequest

@implementation PingHostRequest

@dynamic address;

typedef struct PingHostRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} PingHostRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = PingHostRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PingHostRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PingHostRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PingHostRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PingHostResponse

@implementation PingHostResponse

@dynamic hasResult, result;

typedef struct PingHostResponse__storage_ {
  uint32_t _has_storage_[1];
  PingResult *result;
} PingHostResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.clazz = GPBObjCClass(PingResult),
        .number = PingHostResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PingHostResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PingHostResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PingHostResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusRequest

@implementation GetStatusRequest


typedef struct GetStatusRequest__storage_ {
  uint32_t _has_storage_[1];
} GetStatusRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetStatusRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RebootRequest

@implementation RebootRequest


typedef struct RebootRequest__storage_ {
  uint32_t _has_storage_[1];
} RebootRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RebootRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RebootRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RebootResponse

@implementation RebootResponse


typedef struct RebootResponse__storage_ {
  uint32_t _has_storage_[1];
} RebootResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RebootResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RebootResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpeedTestStats

@implementation SpeedTestStats

@dynamic startTime;
@dynamic uploadMbps;
@dynamic downloadMbps;
@dynamic latencyMs;

typedef struct SpeedTestStats__storage_ {
  uint32_t _has_storage_[1];
  float uploadMbps;
  float downloadMbps;
  float latencyMs;
  uint64_t startTime;
} SpeedTestStats__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uploadMbps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestStats_FieldNumber_UploadMbps,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpeedTestStats__storage_, uploadMbps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestStats_FieldNumber_DownloadMbps,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpeedTestStats__storage_, downloadMbps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestStats_FieldNumber_LatencyMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SpeedTestStats__storage_, latencyMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestStats_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpeedTestStats__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeedTestStats class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpeedTestStats__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientPlatform

@implementation ClientPlatform

@dynamic platform;
@dynamic majorVersion;
@dynamic minorVersion;

typedef struct ClientPlatform__storage_ {
  uint32_t _has_storage_[1];
  ClientPlatform_Platform platform;
  float majorVersion;
  float minorVersion;
} ClientPlatform__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = ClientPlatform_Platform_EnumDescriptor,
        .number = ClientPlatform_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientPlatform__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "majorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientPlatform_FieldNumber_MajorVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientPlatform__storage_, majorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "minorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientPlatform_FieldNumber_MinorVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientPlatform__storage_, minorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientPlatform class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientPlatform__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ClientPlatform_Platform_RawValue(ClientPlatform *message) {
  GPBDescriptor *descriptor = [ClientPlatform descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientPlatform_FieldNumber_Platform];
  return GPBGetMessageRawEnumField(message, field);
}

void SetClientPlatform_Platform_RawValue(ClientPlatform *message, int32_t value) {
  GPBDescriptor *descriptor = [ClientPlatform descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClientPlatform_FieldNumber_Platform];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum ClientPlatform_Platform

GPBEnumDescriptor *ClientPlatform_Platform_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Ios\000Android\000Web\000";
    static const int32_t values[] = {
        ClientPlatform_Platform_Unknown,
        ClientPlatform_Platform_Ios,
        ClientPlatform_Platform_Android,
        ClientPlatform_Platform_Web,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClientPlatform_Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClientPlatform_Platform_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ClientPlatform_Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClientPlatform_Platform_Unknown:
    case ClientPlatform_Platform_Ios:
    case ClientPlatform_Platform_Android:
    case ClientPlatform_Platform_Web:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SpeedTestRequest

@implementation SpeedTestRequest

@dynamic hasClientSpeedtest, clientSpeedtest;
@dynamic clientRssi;
@dynamic hasClientPlatform, clientPlatform;

typedef struct SpeedTestRequest__storage_ {
  uint32_t _has_storage_[1];
  float clientRssi;
  SpeedTestStats *clientSpeedtest;
  ClientPlatform *clientPlatform;
} SpeedTestRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientSpeedtest",
        .dataTypeSpecific.clazz = GPBObjCClass(SpeedTestStats),
        .number = SpeedTestRequest_FieldNumber_ClientSpeedtest,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpeedTestRequest__storage_, clientSpeedtest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientRssi",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestRequest_FieldNumber_ClientRssi,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpeedTestRequest__storage_, clientRssi),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "clientPlatform",
        .dataTypeSpecific.clazz = GPBObjCClass(ClientPlatform),
        .number = SpeedTestRequest_FieldNumber_ClientPlatform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpeedTestRequest__storage_, clientPlatform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeedTestRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpeedTestRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpeedTestResponse

@implementation SpeedTestResponse

@dynamic downloadBps;
@dynamic uploadBps;
@dynamic latencyS;
@dynamic downloadMbps;
@dynamic uploadMbps;
@dynamic latencyMs;
@dynamic hasRouterSpeedtest, routerSpeedtest;
@dynamic downloadMbps1TcpConn;
@dynamic uploadMbps1TcpConn;
@dynamic downloadMbps4TcpConn;
@dynamic uploadMbps4TcpConn;
@dynamic downloadMbps16TcpConn;
@dynamic uploadMbps16TcpConn;
@dynamic downloadMbps64TcpConn;
@dynamic uploadMbps64TcpConn;

typedef struct SpeedTestResponse__storage_ {
  uint32_t _has_storage_[1];
  float downloadBps;
  float uploadBps;
  float latencyS;
  float downloadMbps;
  float uploadMbps;
  float latencyMs;
  float downloadMbps1TcpConn;
  float uploadMbps1TcpConn;
  float downloadMbps4TcpConn;
  float uploadMbps4TcpConn;
  float downloadMbps16TcpConn;
  float uploadMbps16TcpConn;
  float downloadMbps64TcpConn;
  float uploadMbps64TcpConn;
  SpeedTestStats *routerSpeedtest;
} SpeedTestResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "downloadBps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadBps,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadBps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadBps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadBps,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadBps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyS",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_LatencyS,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, latencyS),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadMbps,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadMbps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadMbps",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadMbps,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadMbps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latencyMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_LatencyMs,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, latencyMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps1TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadMbps1TcpConn,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadMbps1TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadMbps1TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadMbps1TcpConn,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadMbps1TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps4TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadMbps4TcpConn,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadMbps4TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadMbps4TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadMbps4TcpConn,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadMbps4TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps16TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadMbps16TcpConn,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadMbps16TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadMbps16TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadMbps16TcpConn,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadMbps16TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "downloadMbps64TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_DownloadMbps64TcpConn,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, downloadMbps64TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "uploadMbps64TcpConn",
        .dataTypeSpecific.clazz = Nil,
        .number = SpeedTestResponse_FieldNumber_UploadMbps64TcpConn,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, uploadMbps64TcpConn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "routerSpeedtest",
        .dataTypeSpecific.clazz = GPBObjCClass(SpeedTestStats),
        .number = SpeedTestResponse_FieldNumber_RouterSpeedtest,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SpeedTestResponse__storage_, routerSpeedtest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeedTestResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SpeedTestResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\007\010\244\201\243\244\000\010\006\244\201\243\244\000\t\010\244\201\243\244\000\n\006\244\201\243\244\000\013\010\244\202\243\244\000\014\006\244\202"
        "\243\244\000\r\010\244\202\243\244\000\016\006\244\202\243\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetConnectionsRequest

@implementation GetConnectionsRequest


typedef struct GetConnectionsRequest__storage_ {
  uint32_t _has_storage_[1];
} GetConnectionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetConnectionsRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetConnectionsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetConnectionsResponse

@implementation GetConnectionsResponse

@dynamic services, services_Count;

typedef struct GetConnectionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *services;
} GetConnectionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "services",
        .dataTypeSpecific.clazz = GPBObjCClass(GetConnectionsResponse_ServiceConnection),
        .number = GetConnectionsResponse_FieldNumber_Services,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetConnectionsResponse__storage_, services),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetConnectionsResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetConnectionsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetConnectionsResponse_ServiceConnection

@implementation GetConnectionsResponse_ServiceConnection

@dynamic address;
@dynamic secondsSinceSuccess;

typedef struct GetConnectionsResponse_ServiceConnection__storage_ {
  uint32_t _has_storage_[1];
  int32_t secondsSinceSuccess;
  NSString *address;
} GetConnectionsResponse_ServiceConnection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = GetConnectionsResponse_ServiceConnection_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetConnectionsResponse_ServiceConnection__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secondsSinceSuccess",
        .dataTypeSpecific.clazz = Nil,
        .number = GetConnectionsResponse_ServiceConnection_FieldNumber_SecondsSinceSuccess,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetConnectionsResponse_ServiceConnection__storage_, secondsSinceSuccess),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetConnectionsResponse_ServiceConnection class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetConnectionsResponse_ServiceConnection__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(GetConnectionsResponse)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDeviceInfoRequest

@implementation GetDeviceInfoRequest


typedef struct GetDeviceInfoRequest__storage_ {
  uint32_t _has_storage_[1];
} GetDeviceInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDeviceInfoRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetDeviceInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetDeviceInfoResponse

@implementation GetDeviceInfoResponse

@dynamic hasDeviceInfo, deviceInfo;

typedef struct GetDeviceInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  DeviceInfo *deviceInfo;
} GetDeviceInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceInfo),
        .number = GetDeviceInfoResponse_FieldNumber_DeviceInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetDeviceInfoResponse__storage_, deviceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetDeviceInfoResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetDeviceInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetTrustedKeysRequest

@implementation SetTrustedKeysRequest

@dynamic keysArray, keysArray_Count;

typedef struct SetTrustedKeysRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} SetTrustedKeysRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PublicKey),
        .number = SetTrustedKeysRequest_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SetTrustedKeysRequest__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetTrustedKeysRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetTrustedKeysRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetTrustedKeysResponse

@implementation SetTrustedKeysResponse


typedef struct SetTrustedKeysResponse__storage_ {
  uint32_t _has_storage_[1];
} SetTrustedKeysResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetTrustedKeysResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SetTrustedKeysResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetSkuRequest

@implementation SetSkuRequest

@dynamic sku;
@dynamic countryCode;
@dynamic applyCountryCode;

typedef struct SetSkuRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sku;
  NSString *countryCode;
} SetSkuRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sku",
        .dataTypeSpecific.clazz = Nil,
        .number = SetSkuRequest_FieldNumber_Sku,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetSkuRequest__storage_, sku),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countryCode",
        .dataTypeSpecific.clazz = Nil,
        .number = SetSkuRequest_FieldNumber_CountryCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetSkuRequest__storage_, countryCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "applyCountryCode",
        .dataTypeSpecific.clazz = Nil,
        .number = SetSkuRequest_FieldNumber_ApplyCountryCode,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetSkuRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetSkuRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetSkuResponse

@implementation SetSkuResponse


typedef struct SetSkuResponse__storage_ {
  uint32_t _has_storage_[1];
} SetSkuResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetSkuResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SetSkuResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateRequest

@implementation UpdateRequest


typedef struct UpdateRequest__storage_ {
  uint32_t _has_storage_[1];
} UpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateResponse

@implementation UpdateResponse


typedef struct UpdateResponse__storage_ {
  uint32_t _has_storage_[1];
} UpdateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RestartControlRequest

@implementation RestartControlRequest


typedef struct RestartControlRequest__storage_ {
  uint32_t _has_storage_[1];
} RestartControlRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RestartControlRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RestartControlRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RestartControlResponse

@implementation RestartControlResponse


typedef struct RestartControlResponse__storage_ {
  uint32_t _has_storage_[1];
} RestartControlResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RestartControlResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RestartControlResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNetworkInterfacesRequest

@implementation GetNetworkInterfacesRequest


typedef struct GetNetworkInterfacesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetNetworkInterfacesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNetworkInterfacesRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetNetworkInterfacesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNetworkInterfacesResponse

@implementation GetNetworkInterfacesResponse

@dynamic networkInterfacesArray, networkInterfacesArray_Count;

typedef struct GetNetworkInterfacesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *networkInterfacesArray;
} GetNetworkInterfacesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "networkInterfacesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(NetworkInterface),
        .number = GetNetworkInterfacesResponse_FieldNumber_NetworkInterfacesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetNetworkInterfacesResponse__storage_, networkInterfacesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetNetworkInterfacesResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNetworkInterfacesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHeapDumpRequest

@implementation GetHeapDumpRequest


typedef struct GetHeapDumpRequest__storage_ {
  uint32_t _has_storage_[1];
} GetHeapDumpRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHeapDumpRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetHeapDumpRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHeapDumpResponse

@implementation GetHeapDumpResponse

@dynamic heapDump;

typedef struct GetHeapDumpResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *heapDump;
} GetHeapDumpResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "heapDump",
        .dataTypeSpecific.clazz = Nil,
        .number = GetHeapDumpResponse_FieldNumber_HeapDump,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHeapDumpResponse__storage_, heapDump),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHeapDumpResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHeapDumpResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLocationRequest

@implementation GetLocationRequest


typedef struct GetLocationRequest__storage_ {
  uint32_t _has_storage_[1];
} GetLocationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLocationRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetLocationRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLocationResponse

@implementation GetLocationResponse

@dynamic hasLla, lla;
@dynamic hasEcef, ecef;

typedef struct GetLocationResponse__storage_ {
  uint32_t _has_storage_[1];
  LLAPosition *lla;
  ECEFPosition *ecef;
} GetLocationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lla",
        .dataTypeSpecific.clazz = GPBObjCClass(LLAPosition),
        .number = GetLocationResponse_FieldNumber_Lla,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLocationResponse__storage_, lla),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ecef",
        .dataTypeSpecific.clazz = GPBObjCClass(ECEFPosition),
        .number = GetLocationResponse_FieldNumber_Ecef,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLocationResponse__storage_, ecef),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetLocationResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLocationResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DishSetEmcRequest

@implementation DishSetEmcRequest

@dynamic theta;
@dynamic phi;
@dynamic rxChan;
@dynamic txChan;
@dynamic modulation;
@dynamic desiredTiltAngle;
@dynamic chanOverride;
@dynamic thetaEnabled;
@dynamic phiEnabled;
@dynamic idle;
@dynamic fastSwitching;
@dynamic skySearch;
@dynamic forcePllUnlock;
@dynamic forceEirpFailure;
@dynamic snowActiveOverride;
@dynamic manualTilting;
@dynamic tiltToStowed;
@dynamic reboot;
@dynamic continuousMotorTest;
@dynamic distanceOverrideMeters;

typedef struct DishSetEmcRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t rxChan;
  uint32_t txChan;
  uint32_t modulation;
  double theta;
  double phi;
  double desiredTiltAngle;
  double distanceOverrideMeters;
} DishSetEmcRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "theta",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_Theta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, theta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "phi",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_Phi,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, phi),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "rxChan",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_RxChan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, rxChan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "txChan",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_TxChan,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, txChan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "modulation",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_Modulation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, modulation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "desiredTiltAngle",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_DesiredTiltAngle,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, desiredTiltAngle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "chanOverride",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ChanOverride,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "thetaEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ThetaEnabled,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "phiEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_PhiEnabled,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "idle",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_Idle,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fastSwitching",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_FastSwitching,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "skySearch",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_SkySearch,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "forcePllUnlock",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ForcePllUnlock,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "forceEirpFailure",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ForceEirpFailure,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "snowActiveOverride",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_SnowActiveOverride,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "manualTilting",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ManualTilting,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tiltToStowed",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_TiltToStowed,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "reboot",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_Reboot,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "continuousMotorTest",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_ContinuousMotorTest,
        .hasIndex = 30,
        .offset = 31,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "distanceOverrideMeters",
        .dataTypeSpecific.clazz = Nil,
        .number = DishSetEmcRequest_FieldNumber_DistanceOverrideMeters,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(DishSetEmcRequest__storage_, distanceOverrideMeters),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DishSetEmcRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DishSetEmcRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DishSetEmcResponse

@implementation DishSetEmcResponse


typedef struct DishSetEmcResponse__storage_ {
  uint32_t _has_storage_[1];
} DishSetEmcResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DishSetEmcResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DishSetEmcResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DishGetEmcRequest

@implementation DishGetEmcRequest


typedef struct DishGetEmcRequest__storage_ {
  uint32_t _has_storage_[1];
} DishGetEmcRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DishGetEmcRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DishGetEmcRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DishGetEmcResponse

@implementation DishGetEmcResponse

@dynamic uuid;
@dynamic timestamp;
@dynamic cplaneUpdates;
@dynamic gpsLatitude;
@dynamic gpsLongitude;
@dynamic gpsPdop;
@dynamic rfMode;
@dynamic phi;
@dynamic theta;
@dynamic rxChannel;
@dynamic txChannel;
@dynamic tDbfMax;
@dynamic tCenter;
@dynamic baselineHeating;
@dynamic additionalHeating;
@dynamic totalHeating;
@dynamic targetTotalHeating;
@dynamic autoPowerSnowMeltEnabled;
@dynamic voltage;
@dynamic rxBeamState;
@dynamic txBeamState;
@dynamic halfDuplexState;
@dynamic manualTiltEnabled;
@dynamic tiltAngle;
@dynamic pllTxLockDetected;
@dynamic eirpExceededThreshold;
@dynamic eirpScaleOverride;
@dynamic idleOverrideEnabled;
@dynamic thetaOverrideEnabled;
@dynamic thetaOverrideValue;
@dynamic phiOverrideEnabled;
@dynamic phiOverrideValue;
@dynamic rxChanOverrideValue;
@dynamic txChanOverrideValue;
@dynamic skySearchOverrideEnabled;
@dynamic fastSwitchingEnabled;
@dynamic modulationOverrideValue;
@dynamic forceEirpFailure;
@dynamic forcePllUnlock;
@dynamic utIneSuccess;
@dynamic rfReady;
@dynamic tiltToStowed;
@dynamic reboot;
@dynamic continuousMotorTest;
@dynamic distanceOverrideMeters;

typedef struct DishGetEmcResponse__storage_ {
  uint32_t _has_storage_[2];
  uint32_t cplaneUpdates;
  uint32_t rfMode;
  uint32_t rxChannel;
  uint32_t txChannel;
  float tDbfMax;
  uint32_t rxBeamState;
  uint32_t txBeamState;
  uint32_t halfDuplexState;
  uint32_t pllTxLockDetected;
  float eirpScaleOverride;
  uint32_t rxChanOverrideValue;
  uint32_t txChanOverrideValue;
  uint32_t modulationOverrideValue;
  uint32_t utIneSuccess;
  NSString *uuid;
  uint64_t timestamp;
  double gpsLatitude;
  double gpsLongitude;
  double gpsPdop;
  double phi;
  double theta;
  double tCenter;
  double baselineHeating;
  double additionalHeating;
  double totalHeating;
  double targetTotalHeating;
  double voltage;
  double tiltAngle;
  double thetaOverrideValue;
  double phiOverrideValue;
  double distanceOverrideMeters;
} DishGetEmcResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "cplaneUpdates",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_CplaneUpdates,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, cplaneUpdates),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gpsLatitude",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_GpsLatitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, gpsLatitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "gpsLongitude",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_GpsLongitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, gpsLongitude),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "gpsPdop",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_GpsPdop,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, gpsPdop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "rfMode",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_RfMode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, rfMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "phi",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Phi,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, phi),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "theta",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Theta,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, theta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "rxChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_RxChannel,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, rxChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "txChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TxChannel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, txChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tDbfMax",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TDbfMax,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, tDbfMax),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "tCenter",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TCenter,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, tCenter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "baselineHeating",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_BaselineHeating,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, baselineHeating),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "additionalHeating",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_AdditionalHeating,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, additionalHeating),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "totalHeating",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TotalHeating,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, totalHeating),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "targetTotalHeating",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TargetTotalHeating,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, targetTotalHeating),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "autoPowerSnowMeltEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_AutoPowerSnowMeltEnabled,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "voltage",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Voltage,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, voltage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "rxBeamState",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_RxBeamState,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, rxBeamState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "txBeamState",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TxBeamState,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, txBeamState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "halfDuplexState",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_HalfDuplexState,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, halfDuplexState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "manualTiltEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ManualTiltEnabled,
        .hasIndex = 23,
        .offset = 24,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tiltAngle",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TiltAngle,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, tiltAngle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "pllTxLockDetected",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_PllTxLockDetected,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, pllTxLockDetected),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "eirpExceededThreshold",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_EirpExceededThreshold,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "eirpScaleOverride",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_EirpScaleOverride,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, eirpScaleOverride),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "idleOverrideEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_IdleOverrideEnabled,
        .hasIndex = 30,
        .offset = 31,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "thetaOverrideEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ThetaOverrideEnabled,
        .hasIndex = 32,
        .offset = 33,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "thetaOverrideValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ThetaOverrideValue,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, thetaOverrideValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "phiOverrideEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_PhiOverrideEnabled,
        .hasIndex = 35,
        .offset = 36,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "phiOverrideValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_PhiOverrideValue,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, phiOverrideValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "rxChanOverrideValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_RxChanOverrideValue,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, rxChanOverrideValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "txChanOverrideValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TxChanOverrideValue,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, txChanOverrideValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "skySearchOverrideEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_SkySearchOverrideEnabled,
        .hasIndex = 40,
        .offset = 41,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fastSwitchingEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_FastSwitchingEnabled,
        .hasIndex = 42,
        .offset = 43,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "modulationOverrideValue",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ModulationOverrideValue,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, modulationOverrideValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "forceEirpFailure",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ForceEirpFailure,
        .hasIndex = 45,
        .offset = 46,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "forcePllUnlock",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ForcePllUnlock,
        .hasIndex = 47,
        .offset = 48,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "utIneSuccess",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_UtIneSuccess,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, utIneSuccess),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rfReady",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_RfReady,
        .hasIndex = 50,
        .offset = 51,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tiltToStowed",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_TiltToStowed,
        .hasIndex = 52,
        .offset = 53,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "reboot",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_Reboot,
        .hasIndex = 54,
        .offset = 55,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "continuousMotorTest",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_ContinuousMotorTest,
        .hasIndex = 56,
        .offset = 57,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "distanceOverrideMeters",
        .dataTypeSpecific.clazz = Nil,
        .number = DishGetEmcResponse_FieldNumber_DistanceOverrideMeters,
        .hasIndex = 58,
        .offset = (uint32_t)offsetof(DishGetEmcResponse__storage_, distanceOverrideMeters),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DishGetEmcResponse class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DishGetEmcResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPersistentStatsRequest

@implementation GetPersistentStatsRequest


typedef struct GetPersistentStatsRequest__storage_ {
  uint32_t _has_storage_[1];
} GetPersistentStatsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPersistentStatsRequest class]
                                     rootClass:[DeviceRoot class]
                                          file:DeviceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetPersistentStatsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
