// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: spacex/api/device/device.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "spacex/api/device/Device.pbrpc.h"
#import "spacex/api/device/Device.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "spacex/api/common/status/Status.pbobjc.h"
#import "spacex/api/device/Command.pbobjc.h"
#import "spacex/api/device/Common.pbobjc.h"
#import "spacex/api/device/Dish.pbobjc.h"
#import "spacex/api/device/Transceiver.pbobjc.h"
#import "spacex/api/device/Wifi.pbobjc.h"

@implementation Device

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"SpaceX.API.Device"
                 serviceName:@"Device"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"SpaceX.API.Device"
                 serviceName:@"Device"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Stream(stream ToDevice) returns (stream FromDevice)

- (void)streamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, FromDevice *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToStreamWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToStreamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, FromDevice *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"Stream"
            requestsWriter:requestWriter
             responseClass:[FromDevice class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
- (GRPCStreamingProtoCall *)streamWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Stream"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[FromDevice class]];
}

#pragma mark Handle(Request) returns (Response)

- (void)handleWithRequest:(Request *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToHandleWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
- (GRPCProtoCall *)RPCToHandleWithRequest:(Request *)request handler:(void(^)(Response *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Handle"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[Response class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
- (GRPCUnaryProtoCall *)handleWithMessage:(Request *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Handle"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[Response class]];
}

@end
#endif
